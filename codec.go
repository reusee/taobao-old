// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package taobao

import (
	"encoding/json"
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
	"sync"
	"time"
)

const (
	codecSelferC_UTF84788         = 1
	codecSelferC_RAW4788          = 0
	codecSelverValueTypeArray4788 = 10
	codecSelverValueTypeMap4788   = 9
)

var (
	codecSelferBitsize4788                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr4788 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer4788 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 sync.RWMutex
		var v1 json.RawMessage
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *ClientSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep1 := !z.EncBinary()
		yy2arr1 := z.EncBasicHandle().StructToArray
		var yyfirst1 bool
		var yyq1 [0]bool
		_, _, _, _ = yysep1, yyfirst1, yyq1, yy2arr1
		const yyr1 bool = false
		if yyr1 || yy2arr1 {
			r.EncodeArrayStart(0)
		} else {
			var yynn1 int = 0
			for _, b := range yyq1 {
				if b {
					yynn1++
				}
			}
			r.EncodeMapStart(yynn1)
		}
		if yysep1 {
			if yyr1 || yy2arr1 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *ClientSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl2 := r.ReadMapStart()
		if yyl2 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl2 := r.ReadArrayStart()
		if yyl2 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *ClientSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		if !yyhl3 {
			r.ReadMapKVSeparator()
		}
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	if !yyhl3 {
		r.ReadMapEnd()
	}
}

func (x *ClientSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		if yyj4 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ClientInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep5 := !z.EncBinary()
		yy2arr5 := z.EncBasicHandle().StructToArray
		var yyfirst5 bool
		var yyq5 [1]bool
		_, _, _, _ = yysep5, yyfirst5, yyq5, yy2arr5
		const yyr5 bool = false
		if yyr5 || yy2arr5 {
			r.EncodeArrayStart(1)
		} else {
			var yynn5 int = 1
			for _, b := range yyq5 {
				if b {
					yynn5++
				}
			}
			r.EncodeMapStart(yynn5)
		}
		if yyr5 || yy2arr5 {
			r.EncodeString(codecSelferC_UTF84788, string(x.HttpProxyAddr))
		} else {
			yyfirst5 = true
			r.EncodeString(codecSelferC_UTF84788, string("HttpProxyAddr"))
			if yysep5 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.HttpProxyAddr))
		}
		if yysep5 {
			if yyr5 || yy2arr5 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *ClientInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl7 := r.ReadMapStart()
		if yyl7 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl7, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl7 := r.ReadArrayStart()
		if yyl7 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl7, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *ClientInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj8 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		if !yyhl8 {
			r.ReadMapKVSeparator()
		}
		switch yys8 {
		case "HttpProxyAddr":
			if r.TryDecodeAsNil() {
				x.HttpProxyAddr = ""
			} else {
				x.HttpProxyAddr = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadMapEnd()
	}
}

func (x *ClientInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HttpProxyAddr = ""
	} else {
		x.HttpProxyAddr = string(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		if yyj10 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x ClientState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeUint(uint64(x))
}

func (x *ClientState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*((*uint8)(x)) = uint8(r.DecodeUint(8))
}

func (x *PageConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep12 := !z.EncBinary()
		yy2arr12 := z.EncBasicHandle().StructToArray
		var yyfirst12 bool
		var yyq12 [2]bool
		_, _, _, _ = yysep12, yyfirst12, yyq12, yy2arr12
		const yyr12 bool = false
		if yyr12 || yy2arr12 {
			r.EncodeArrayStart(2)
		} else {
			var yynn12 int = 2
			for _, b := range yyq12 {
				if b {
					yynn12++
				}
			}
			r.EncodeMapStart(yynn12)
		}
		if yyr12 || yy2arr12 {
			if x.Mods == nil {
				r.EncodeNil()
			} else {
				h.encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				}(x.Mods), e)
			}
		} else {
			yyfirst12 = true
			r.EncodeString(codecSelferC_UTF84788, string("Mods"))
			if yysep12 {
				r.EncodeMapKVSeparator()
			}
			if x.Mods == nil {
				r.EncodeNil()
			} else {
				h.encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				}(x.Mods), e)
			}
		}
		if yyr12 || yy2arr12 {
			if yysep12 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.MainInfo)
		} else {
			if yyfirst12 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst12 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("MainInfo"))
			if yysep12 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.MainInfo)
		}
		if yysep12 {
			if yyr12 || yy2arr12 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *PageConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl15 := r.ReadMapStart()
		if yyl15 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl15, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl15 := r.ReadArrayStart()
		if yyl15 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl15, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *PageConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys16Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys16Slc
	var yyhl16 bool = l >= 0
	for yyj16 := 0; ; yyj16++ {
		if yyhl16 {
			if yyj16 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj16 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys16Slc = r.DecodeBytes(yys16Slc, true, true)
		yys16 := string(yys16Slc)
		if !yyhl16 {
			r.ReadMapKVSeparator()
		}
		switch yys16 {
		case "Mods":
			if r.TryDecodeAsNil() {
				x.Mods = nil
			} else {
				yyv17 := &x.Mods
				h.decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0((*map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				})(yyv17), d)
			}
		case "MainInfo":
			if r.TryDecodeAsNil() {
				x.MainInfo = struct{ SrpGlobal struct{ Cat string } }{}
			} else {
				yyv18 := &x.MainInfo
				z.DecFallback(yyv18, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys16)
		} // end switch yys16
	} // end for yyj16
	if !yyhl16 {
		r.ReadMapEnd()
	}
}

func (x *PageConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Mods = nil
	} else {
		yyv20 := &x.Mods
		h.decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0((*map[string]struct {
			Status string
			Export bool
			Data   json.RawMessage
		})(yyv20), d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MainInfo = struct{ SrpGlobal struct{ Cat string } }{}
	} else {
		yyv21 := &x.MainInfo
		z.DecFallback(yyv21, false)
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		if yyj19 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Err) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep22 := !z.EncBinary()
		yy2arr22 := z.EncBasicHandle().StructToArray
		var yyfirst22 bool
		var yyq22 [3]bool
		_, _, _, _ = yysep22, yyfirst22, yyq22, yy2arr22
		const yyr22 bool = false
		if yyr22 || yy2arr22 {
			r.EncodeArrayStart(3)
		} else {
			var yynn22 int = 3
			for _, b := range yyq22 {
				if b {
					yynn22++
				}
			}
			r.EncodeMapStart(yynn22)
		}
		if yyr22 || yy2arr22 {
			r.EncodeString(codecSelferC_UTF84788, string(x.Pkg))
		} else {
			yyfirst22 = true
			r.EncodeString(codecSelferC_UTF84788, string("Pkg"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Pkg))
		}
		if yyr22 || yy2arr22 {
			if yysep22 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Info))
		} else {
			if yyfirst22 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst22 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Info"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Info))
		}
		if yyr22 || yy2arr22 {
			if yysep22 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Err == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Err)
			}
		} else {
			if yyfirst22 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst22 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Err"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			if x.Err == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Err)
			}
		}
		if yysep22 {
			if yyr22 || yy2arr22 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Err) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl26 := r.ReadMapStart()
		if yyl26 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl26, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl26 := r.ReadArrayStart()
		if yyl26 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl26, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Err) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys27Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys27Slc
	var yyhl27 bool = l >= 0
	for yyj27 := 0; ; yyj27++ {
		if yyhl27 {
			if yyj27 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj27 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys27Slc = r.DecodeBytes(yys27Slc, true, true)
		yys27 := string(yys27Slc)
		if !yyhl27 {
			r.ReadMapKVSeparator()
		}
		switch yys27 {
		case "Pkg":
			if r.TryDecodeAsNil() {
				x.Pkg = ""
			} else {
				x.Pkg = string(r.DecodeString())
			}
		case "Info":
			if r.TryDecodeAsNil() {
				x.Info = ""
			} else {
				x.Info = string(r.DecodeString())
			}
		case "Err":
			if r.TryDecodeAsNil() {
				x.Err = nil
			} else {
				yyv30 := &x.Err
				z.DecFallback(yyv30, true)
			}
		default:
			z.DecStructFieldNotFound(-1, yys27)
		} // end switch yys27
	} // end for yyj27
	if !yyhl27 {
		r.ReadMapEnd()
	}
}

func (x *Err) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj31 int
	var yyb31 bool
	var yyhl31 bool = l >= 0
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Pkg = ""
	} else {
		x.Pkg = string(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Info = ""
	} else {
		x.Info = string(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Err = nil
	} else {
		yyv34 := &x.Err
		z.DecFallback(yyv34, true)
	}
	for {
		yyj31++
		if yyhl31 {
			yyb31 = yyj31 > l
		} else {
			yyb31 = r.CheckBreak()
		}
		if yyb31 {
			break
		}
		if yyj31 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj31-1, "")
	}
	r.ReadArrayEnd()
}

func (x *FileBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep35 := !z.EncBinary()
		yy2arr35 := z.EncBasicHandle().StructToArray
		var yyfirst35 bool
		var yyq35 [0]bool
		_, _, _, _ = yysep35, yyfirst35, yyq35, yy2arr35
		const yyr35 bool = false
		if yyr35 || yy2arr35 {
			r.EncodeArrayStart(0)
		} else {
			var yynn35 int = 0
			for _, b := range yyq35 {
				if b {
					yynn35++
				}
			}
			r.EncodeMapStart(yynn35)
		}
		if yysep35 {
			if yyr35 || yy2arr35 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *FileBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl36 := r.ReadMapStart()
		if yyl36 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl36, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl36 := r.ReadArrayStart()
		if yyl36 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl36, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *FileBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys37Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys37Slc
	var yyhl37 bool = l >= 0
	for yyj37 := 0; ; yyj37++ {
		if yyhl37 {
			if yyj37 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj37 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys37Slc = r.DecodeBytes(yys37Slc, true, true)
		yys37 := string(yys37Slc)
		if !yyhl37 {
			r.ReadMapKVSeparator()
		}
		switch yys37 {
		default:
			z.DecStructFieldNotFound(-1, yys37)
		} // end switch yys37
	} // end for yyj37
	if !yyhl37 {
		r.ReadMapEnd()
	}
}

func (x *FileBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		if yyj38 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EntryHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep39 := !z.EncBinary()
		yy2arr39 := z.EncBasicHandle().StructToArray
		var yyfirst39 bool
		var yyq39 [3]bool
		_, _, _, _ = yysep39, yyfirst39, yyq39, yy2arr39
		const yyr39 bool = false
		if yyr39 || yy2arr39 {
			r.EncodeArrayStart(3)
		} else {
			var yynn39 int = 3
			for _, b := range yyq39 {
				if b {
					yynn39++
				}
			}
			r.EncodeMapStart(yynn39)
		}
		if yyr39 || yy2arr39 {
			r.EncodeUint(uint64(x.Cat))
		} else {
			yyfirst39 = true
			r.EncodeString(codecSelferC_UTF84788, string("Cat"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Cat))
		}
		if yyr39 || yy2arr39 {
			if yysep39 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeUint(uint64(x.Page))
		} else {
			if yyfirst39 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst39 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Page"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Page))
		}
		if yyr39 || yy2arr39 {
			if yysep39 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeUint(uint64(x.Len))
		} else {
			if yyfirst39 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst39 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Len"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Len))
		}
		if yysep39 {
			if yyr39 || yy2arr39 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *EntryHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl43 := r.ReadMapStart()
		if yyl43 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl43, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl43 := r.ReadArrayStart()
		if yyl43 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl43, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *EntryHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys44Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys44Slc
	var yyhl44 bool = l >= 0
	for yyj44 := 0; ; yyj44++ {
		if yyhl44 {
			if yyj44 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj44 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys44Slc = r.DecodeBytes(yys44Slc, true, true)
		yys44 := string(yys44Slc)
		if !yyhl44 {
			r.ReadMapKVSeparator()
		}
		switch yys44 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = uint64(r.DecodeUint(64))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = uint8(r.DecodeUint(8))
			}
		case "Len":
			if r.TryDecodeAsNil() {
				x.Len = 0
			} else {
				x.Len = uint32(r.DecodeUint(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys44)
		} // end switch yys44
	} // end for yyj44
	if !yyhl44 {
		r.ReadMapEnd()
	}
}

func (x *EntryHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj48 int
	var yyb48 bool
	var yyhl48 bool = l >= 0
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = uint64(r.DecodeUint(64))
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = uint8(r.DecodeUint(8))
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Len = 0
	} else {
		x.Len = uint32(r.DecodeUint(32))
	}
	for {
		yyj48++
		if yyhl48 {
			yyb48 = yyj48 > l
		} else {
			yyb48 = r.CheckBreak()
		}
		if yyb48 {
			break
		}
		if yyj48 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj48-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Mysql) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep52 := !z.EncBinary()
		yy2arr52 := z.EncBasicHandle().StructToArray
		var yyfirst52 bool
		var yyq52 [0]bool
		_, _, _, _ = yysep52, yyfirst52, yyq52, yy2arr52
		const yyr52 bool = false
		if yyr52 || yy2arr52 {
			r.EncodeArrayStart(0)
		} else {
			var yynn52 int = 0
			for _, b := range yyq52 {
				if b {
					yynn52++
				}
			}
			r.EncodeMapStart(yynn52)
		}
		if yysep52 {
			if yyr52 || yy2arr52 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Mysql) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl53 := r.ReadMapStart()
		if yyl53 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl53, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl53 := r.ReadArrayStart()
		if yyl53 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl53, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Mysql) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj54 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		if !yyhl54 {
			r.ReadMapKVSeparator()
		}
		switch yys54 {
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	if !yyhl54 {
		r.ReadMapEnd()
	}
}

func (x *Mysql) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		if yyj55 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	r.ReadArrayEnd()
}

func (x *TraceSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep56 := !z.EncBinary()
		yy2arr56 := z.EncBasicHandle().StructToArray
		var yyfirst56 bool
		var yyq56 [0]bool
		_, _, _, _ = yysep56, yyfirst56, yyq56, yy2arr56
		const yyr56 bool = false
		if yyr56 || yy2arr56 {
			r.EncodeArrayStart(0)
		} else {
			var yynn56 int = 0
			for _, b := range yyq56 {
				if b {
					yynn56++
				}
			}
			r.EncodeMapStart(yynn56)
		}
		if yysep56 {
			if yyr56 || yy2arr56 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *TraceSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl57 := r.ReadMapStart()
		if yyl57 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl57, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl57 := r.ReadArrayStart()
		if yyl57 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl57, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *TraceSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys58Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys58Slc
	var yyhl58 bool = l >= 0
	for yyj58 := 0; ; yyj58++ {
		if yyhl58 {
			if yyj58 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj58 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys58Slc = r.DecodeBytes(yys58Slc, true, true)
		yys58 := string(yys58Slc)
		if !yyhl58 {
			r.ReadMapKVSeparator()
		}
		switch yys58 {
		default:
			z.DecStructFieldNotFound(-1, yys58)
		} // end switch yys58
	} // end for yyj58
	if !yyhl58 {
		r.ReadMapEnd()
	}
}

func (x *TraceSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj59 int
	var yyb59 bool
	var yyhl59 bool = l >= 0
	for {
		yyj59++
		if yyhl59 {
			yyb59 = yyj59 > l
		} else {
			yyb59 = r.CheckBreak()
		}
		if yyb59 {
			break
		}
		if yyj59 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj59-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Trace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep60 := !z.EncBinary()
		yy2arr60 := z.EncBasicHandle().StructToArray
		var yyfirst60 bool
		var yyq60 [0]bool
		_, _, _, _ = yysep60, yyfirst60, yyq60, yy2arr60
		const yyr60 bool = false
		if yyr60 || yy2arr60 {
			r.EncodeArrayStart(0)
		} else {
			var yynn60 int = 0
			for _, b := range yyq60 {
				if b {
					yynn60++
				}
			}
			r.EncodeMapStart(yynn60)
		}
		if yysep60 {
			if yyr60 || yy2arr60 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Trace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl61 := r.ReadMapStart()
		if yyl61 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl61, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl61 := r.ReadArrayStart()
		if yyl61 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl61, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Trace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys62Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys62Slc
	var yyhl62 bool = l >= 0
	for yyj62 := 0; ; yyj62++ {
		if yyhl62 {
			if yyj62 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj62 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys62Slc = r.DecodeBytes(yys62Slc, true, true)
		yys62 := string(yys62Slc)
		if !yyhl62 {
			r.ReadMapKVSeparator()
		}
		switch yys62 {
		default:
			z.DecStructFieldNotFound(-1, yys62)
		} // end switch yys62
	} // end for yyj62
	if !yyhl62 {
		r.ReadMapEnd()
	}
}

func (x *Trace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		if yyj63 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Entry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep64 := !z.EncBinary()
		yy2arr64 := z.EncBasicHandle().StructToArray
		var yyfirst64 bool
		var yyq64 [1]bool
		_, _, _, _ = yysep64, yyfirst64, yyq64, yy2arr64
		const yyr64 bool = false
		if yyr64 || yy2arr64 {
			r.EncodeArrayStart(1)
		} else {
			var yynn64 int = 1
			for _, b := range yyq64 {
				if b {
					yynn64++
				}
			}
			r.EncodeMapStart(yynn64)
		}
		if yyr64 || yy2arr64 {
			r.EncodeString(codecSelferC_UTF84788, string(x.Message))
		} else {
			yyfirst64 = true
			r.EncodeString(codecSelferC_UTF84788, string("Message"))
			if yysep64 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Message))
		}
		if yysep64 {
			if yyr64 || yy2arr64 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Entry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl66 := r.ReadMapStart()
		if yyl66 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl66, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl66 := r.ReadArrayStart()
		if yyl66 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl66, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Entry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys67Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys67Slc
	var yyhl67 bool = l >= 0
	for yyj67 := 0; ; yyj67++ {
		if yyhl67 {
			if yyj67 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj67 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys67Slc = r.DecodeBytes(yys67Slc, true, true)
		yys67 := string(yys67Slc)
		if !yyhl67 {
			r.ReadMapKVSeparator()
		}
		switch yys67 {
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys67)
		} // end switch yys67
	} // end for yyj67
	if !yyhl67 {
		r.ReadMapEnd()
	}
}

func (x *Entry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj69 int
	var yyb69 bool
	var yyhl69 bool = l >= 0
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj69++
		if yyhl69 {
			yyb69 = yyj69 > l
		} else {
			yyb69 = r.CheckBreak()
		}
		if yyb69 {
			break
		}
		if yyj69 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj69-1, "")
	}
	r.ReadArrayEnd()
}

func (x Traces) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encTraces(Traces(x), e)
	}
}

func (x *Traces) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decTraces((*Traces)(x), d)
}

func (x *sliceSorter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep71 := !z.EncBinary()
		yy2arr71 := z.EncBasicHandle().StructToArray
		var yyfirst71 bool
		var yyq71 [0]bool
		_, _, _, _ = yysep71, yyfirst71, yyq71, yy2arr71
		const yyr71 bool = false
		if yyr71 || yy2arr71 {
			r.EncodeArrayStart(0)
		} else {
			var yynn71 int = 0
			for _, b := range yyq71 {
				if b {
					yynn71++
				}
			}
			r.EncodeMapStart(yynn71)
		}
		if yysep71 {
			if yyr71 || yy2arr71 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *sliceSorter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl72 := r.ReadMapStart()
		if yyl72 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl72, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl72 := r.ReadArrayStart()
		if yyl72 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl72, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *sliceSorter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys73Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys73Slc
	var yyhl73 bool = l >= 0
	for yyj73 := 0; ; yyj73++ {
		if yyhl73 {
			if yyj73 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj73 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys73Slc = r.DecodeBytes(yys73Slc, true, true)
		yys73 := string(yys73Slc)
		if !yyhl73 {
			r.ReadMapKVSeparator()
		}
		switch yys73 {
		default:
			z.DecStructFieldNotFound(-1, yys73)
		} // end switch yys73
	} // end for yyj73
	if !yyhl73 {
		r.ReadMapEnd()
	}
}

func (x *sliceSorter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		if yyj74 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RawItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep75 := !z.EncBinary()
		yy2arr75 := z.EncBasicHandle().StructToArray
		var yyfirst75 bool
		var yyq75 [18]bool
		_, _, _, _ = yysep75, yyfirst75, yyq75, yy2arr75
		const yyr75 bool = false
		if yyr75 || yy2arr75 {
			r.EncodeArrayStart(18)
		} else {
			var yynn75 int = 18
			for _, b := range yyq75 {
				if b {
					yynn75++
				}
			}
			r.EncodeMapStart(yynn75)
		}
		if yyr75 || yy2arr75 {
			r.EncodeString(codecSelferC_UTF84788, string(x.Nid))
		} else {
			yyfirst75 = true
			r.EncodeString(codecSelferC_UTF84788, string("Nid"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Nid))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Category))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Category"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Category))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Pid))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Pid"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Pid))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Title))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Title"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Title))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Raw_title))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Raw_title"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Raw_title))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Pic_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Pic_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Pic_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Detail_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Detail_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Detail_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_price))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("View_price"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_price))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_fee))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("View_fee"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_fee))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Item_loc))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Item_loc"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Item_loc))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Reserve_price))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Reserve_price"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Reserve_price))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_sales))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("View_sales"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.View_sales))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Comment_count))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Comment_count"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Comment_count))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.User_id))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("User_id"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.User_id))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Nick))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Nick"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Nick))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Shopcard)
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Shopcard"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Shopcard)
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Comment_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Comment_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Comment_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.ShopLink))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("ShopLink"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.ShopLink))
		}
		if yysep75 {
			if yyr75 || yy2arr75 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *RawItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl94 := r.ReadMapStart()
		if yyl94 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl94, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl94 := r.ReadArrayStart()
		if yyl94 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl94, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *RawItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys95Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys95Slc
	var yyhl95 bool = l >= 0
	for yyj95 := 0; ; yyj95++ {
		if yyhl95 {
			if yyj95 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj95 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys95Slc = r.DecodeBytes(yys95Slc, true, true)
		yys95 := string(yys95Slc)
		if !yyhl95 {
			r.ReadMapKVSeparator()
		}
		switch yys95 {
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = ""
			} else {
				x.Nid = string(r.DecodeString())
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = ""
			} else {
				x.Category = string(r.DecodeString())
			}
		case "Pid":
			if r.TryDecodeAsNil() {
				x.Pid = ""
			} else {
				x.Pid = string(r.DecodeString())
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Raw_title":
			if r.TryDecodeAsNil() {
				x.Raw_title = ""
			} else {
				x.Raw_title = string(r.DecodeString())
			}
		case "Pic_url":
			if r.TryDecodeAsNil() {
				x.Pic_url = ""
			} else {
				x.Pic_url = string(r.DecodeString())
			}
		case "Detail_url":
			if r.TryDecodeAsNil() {
				x.Detail_url = ""
			} else {
				x.Detail_url = string(r.DecodeString())
			}
		case "View_price":
			if r.TryDecodeAsNil() {
				x.View_price = ""
			} else {
				x.View_price = string(r.DecodeString())
			}
		case "View_fee":
			if r.TryDecodeAsNil() {
				x.View_fee = ""
			} else {
				x.View_fee = string(r.DecodeString())
			}
		case "Item_loc":
			if r.TryDecodeAsNil() {
				x.Item_loc = ""
			} else {
				x.Item_loc = string(r.DecodeString())
			}
		case "Reserve_price":
			if r.TryDecodeAsNil() {
				x.Reserve_price = ""
			} else {
				x.Reserve_price = string(r.DecodeString())
			}
		case "View_sales":
			if r.TryDecodeAsNil() {
				x.View_sales = ""
			} else {
				x.View_sales = string(r.DecodeString())
			}
		case "Comment_count":
			if r.TryDecodeAsNil() {
				x.Comment_count = ""
			} else {
				x.Comment_count = string(r.DecodeString())
			}
		case "User_id":
			if r.TryDecodeAsNil() {
				x.User_id = ""
			} else {
				x.User_id = string(r.DecodeString())
			}
		case "Nick":
			if r.TryDecodeAsNil() {
				x.Nick = ""
			} else {
				x.Nick = string(r.DecodeString())
			}
		case "Shopcard":
			if r.TryDecodeAsNil() {
				x.Shopcard = struct {
					LevelClasses    []struct{ LevelClass string }
					IsTmall         bool
					Delivery        []int
					Description     []int
					Service         []int
					EncryptedUserId string
					SellerCredit    int
					TotalRate       int
				}{}
			} else {
				yyv111 := &x.Shopcard
				z.DecFallback(yyv111, false)
			}
		case "Comment_url":
			if r.TryDecodeAsNil() {
				x.Comment_url = ""
			} else {
				x.Comment_url = string(r.DecodeString())
			}
		case "ShopLink":
			if r.TryDecodeAsNil() {
				x.ShopLink = ""
			} else {
				x.ShopLink = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys95)
		} // end switch yys95
	} // end for yyj95
	if !yyhl95 {
		r.ReadMapEnd()
	}
}

func (x *RawItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj114 int
	var yyb114 bool
	var yyhl114 bool = l >= 0
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Nid = ""
	} else {
		x.Nid = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = ""
	} else {
		x.Category = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pid = ""
	} else {
		x.Pid = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Raw_title = ""
	} else {
		x.Raw_title = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pic_url = ""
	} else {
		x.Pic_url = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Detail_url = ""
	} else {
		x.Detail_url = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_price = ""
	} else {
		x.View_price = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_fee = ""
	} else {
		x.View_fee = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Item_loc = ""
	} else {
		x.Item_loc = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reserve_price = ""
	} else {
		x.Reserve_price = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_sales = ""
	} else {
		x.View_sales = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_count = ""
	} else {
		x.Comment_count = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User_id = ""
	} else {
		x.User_id = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nick = ""
	} else {
		x.Nick = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Shopcard = struct {
			LevelClasses    []struct{ LevelClass string }
			IsTmall         bool
			Delivery        []int
			Description     []int
			Service         []int
			EncryptedUserId string
			SellerCredit    int
			TotalRate       int
		}{}
	} else {
		yyv130 := &x.Shopcard
		z.DecFallback(yyv130, false)
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_url = ""
	} else {
		x.Comment_url = string(r.DecodeString())
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ShopLink = ""
	} else {
		x.ShopLink = string(r.DecodeString())
	}
	for {
		yyj114++
		if yyhl114 {
			yyb114 = yyj114 > l
		} else {
			yyb114 = r.CheckBreak()
		}
		if yyb114 {
			break
		}
		if yyj114 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj114-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Raw) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep133 := !z.EncBinary()
		yy2arr133 := z.EncBasicHandle().StructToArray
		var yyfirst133 bool
		var yyq133 [4]bool
		_, _, _, _ = yysep133, yyfirst133, yyq133, yy2arr133
		const yyr133 bool = false
		if yyr133 || yy2arr133 {
			r.EncodeArrayStart(4)
		} else {
			var yynn133 int = 4
			for _, b := range yyq133 {
				if b {
					yynn133++
				}
			}
			r.EncodeMapStart(yynn133)
		}
		if yyr133 || yy2arr133 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst133 = true
			r.EncodeString(codecSelferC_UTF84788, string("Cat"))
			if yysep133 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr133 || yy2arr133 {
			if yysep133 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst133 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst133 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Page"))
			if yysep133 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr133 || yy2arr133 {
			if yysep133 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceItem([]RawItem(x.Items), e)
			}
		} else {
			if yyfirst133 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst133 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Items"))
			if yysep133 {
				r.EncodeMapKVSeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceItem([]RawItem(x.Items), e)
			}
		}
		if yyr133 || yy2arr133 {
			if yysep133 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW4788, []byte(x.Html))
			}
		} else {
			if yyfirst133 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst133 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Html"))
			if yysep133 {
				r.EncodeMapKVSeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW4788, []byte(x.Html))
			}
		}
		if yysep133 {
			if yyr133 || yy2arr133 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Raw) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl138 := r.ReadMapStart()
		if yyl138 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl138, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl138 := r.ReadArrayStart()
		if yyl138 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl138, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Raw) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys139Slc
	var yyhl139 bool = l >= 0
	for yyj139 := 0; ; yyj139++ {
		if yyhl139 {
			if yyj139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj139 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys139Slc = r.DecodeBytes(yys139Slc, true, true)
		yys139 := string(yys139Slc)
		if !yyhl139 {
			r.ReadMapKVSeparator()
		}
		switch yys139 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv142 := &x.Items
				h.decSliceItem((*[]RawItem)(yyv142), d)
			}
		case "Html":
			if r.TryDecodeAsNil() {
				x.Html = nil
			} else {
				yyv143 := &x.Html
				*yyv143 = r.DecodeBytes(*(*[]byte)(yyv143), false, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys139)
		} // end switch yys139
	} // end for yyj139
	if !yyhl139 {
		r.ReadMapEnd()
	}
}

func (x *Raw) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv147 := &x.Items
		h.decSliceItem((*[]RawItem)(yyv147), d)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Html = nil
	} else {
		yyv148 := &x.Html
		*yyv148 = r.DecodeBytes(*(*[]byte)(yyv148), false, false)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		if yyj144 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Source) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep149 := !z.EncBinary()
		yy2arr149 := z.EncBasicHandle().StructToArray
		var yyfirst149 bool
		var yyq149 [2]bool
		_, _, _, _ = yysep149, yyfirst149, yyq149, yy2arr149
		const yyr149 bool = false
		if yyr149 || yy2arr149 {
			r.EncodeArrayStart(2)
		} else {
			var yynn149 int = 2
			for _, b := range yyq149 {
				if b {
					yynn149++
				}
			}
			r.EncodeMapStart(yynn149)
		}
		if yyr149 || yy2arr149 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst149 = true
			r.EncodeString(codecSelferC_UTF84788, string("Cat"))
			if yysep149 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr149 || yy2arr149 {
			if yysep149 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst149 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst149 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Page"))
			if yysep149 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yysep149 {
			if yyr149 || yy2arr149 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Source) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl152 := r.ReadMapStart()
		if yyl152 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl152, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl152 := r.ReadArrayStart()
		if yyl152 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl152, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Source) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys153Slc
	var yyhl153 bool = l >= 0
	for yyj153 := 0; ; yyj153++ {
		if yyhl153 {
			if yyj153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj153 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys153Slc = r.DecodeBytes(yys153Slc, true, true)
		yys153 := string(yys153Slc)
		if !yyhl153 {
			r.ReadMapKVSeparator()
		}
		switch yys153 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize4788))
			}
		default:
			z.DecStructFieldNotFound(-1, yys153)
		} // end switch yys153
	} // end for yyj153
	if !yyhl153 {
		r.ReadMapEnd()
	}
}

func (x *Source) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj156 int
	var yyb156 bool
	var yyhl156 bool = l >= 0
	yyj156++
	if yyhl156 {
		yyb156 = yyj156 > l
	} else {
		yyb156 = r.CheckBreak()
	}
	if yyb156 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj156++
	if yyhl156 {
		yyb156 = yyj156 > l
	} else {
		yyb156 = r.CheckBreak()
	}
	if yyb156 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize4788))
	}
	for {
		yyj156++
		if yyhl156 {
			yyb156 = yyj156 > l
		} else {
			yyb156 = r.CheckBreak()
		}
		if yyb156 {
			break
		}
		if yyj156 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj156-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep159 := !z.EncBinary()
		yy2arr159 := z.EncBasicHandle().StructToArray
		var yyfirst159 bool
		var yyq159 [3]bool
		_, _, _, _ = yysep159, yyfirst159, yyq159, yy2arr159
		const yyr159 bool = false
		if yyr159 || yy2arr159 {
			r.EncodeArrayStart(3)
		} else {
			var yynn159 int = 3
			for _, b := range yyq159 {
				if b {
					yynn159++
				}
			}
			r.EncodeMapStart(yynn159)
		}
		if yyr159 || yy2arr159 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst159 = true
			r.EncodeString(codecSelferC_UTF84788, string("Cat"))
			if yysep159 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr159 || yy2arr159 {
			if yysep159 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst159 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst159 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Page"))
			if yysep159 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr159 || yy2arr159 {
			if yysep159 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Done))
		} else {
			if yyfirst159 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst159 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Done"))
			if yysep159 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Done))
		}
		if yysep159 {
			if yyr159 || yy2arr159 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl163 := r.ReadMapStart()
		if yyl163 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl163, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl163 := r.ReadArrayStart()
		if yyl163 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl163, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj164 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		if !yyhl164 {
			r.ReadMapKVSeparator()
		}
		switch yys164 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Done":
			if r.TryDecodeAsNil() {
				x.Done = false
			} else {
				x.Done = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	if !yyhl164 {
		r.ReadMapEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj168 int
	var yyb168 bool
	var yyhl168 bool = l >= 0
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Done = false
	} else {
		x.Done = bool(r.DecodeBool())
	}
	for {
		yyj168++
		if yyhl168 {
			yyb168 = yyj168 > l
		} else {
			yyb168 = r.CheckBreak()
		}
		if yyb168 {
			break
		}
		if yyj168 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj168-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Cat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep172 := !z.EncBinary()
		yy2arr172 := z.EncBasicHandle().StructToArray
		var yyfirst172 bool
		var yyq172 [4]bool
		_, _, _, _ = yysep172, yyfirst172, yyq172, yy2arr172
		const yyr172 bool = false
		if yyr172 || yy2arr172 {
			r.EncodeArrayStart(4)
		} else {
			var yynn172 int = 4
			for _, b := range yyq172 {
				if b {
					yynn172++
				}
			}
			r.EncodeMapStart(yynn172)
		}
		if yyr172 || yy2arr172 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst172 = true
			r.EncodeString(codecSelferC_UTF84788, string("Cat"))
			if yysep172 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr172 || yy2arr172 {
			if yysep172 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Name))
		} else {
			if yyfirst172 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst172 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Name"))
			if yysep172 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.Name))
		}
		if yyr172 || yy2arr172 {
			if yysep172 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		} else {
			if yyfirst172 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst172 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Relatives"))
			if yysep172 {
				r.EncodeMapKVSeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		}
		if yyr172 || yy2arr172 {
			if yysep172 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Parent))
		} else {
			if yyfirst172 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst172 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Parent"))
			if yysep172 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Parent))
		}
		if yysep172 {
			if yyr172 || yy2arr172 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Cat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl177 := r.ReadMapStart()
		if yyl177 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl177, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl177 := r.ReadArrayStart()
		if yyl177 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl177, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *Cat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys178Slc
	var yyhl178 bool = l >= 0
	for yyj178 := 0; ; yyj178++ {
		if yyhl178 {
			if yyj178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj178 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys178Slc = r.DecodeBytes(yys178Slc, true, true)
		yys178 := string(yys178Slc)
		if !yyhl178 {
			r.ReadMapKVSeparator()
		}
		switch yys178 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Relatives":
			if r.TryDecodeAsNil() {
				x.Relatives = nil
			} else {
				yyv181 := &x.Relatives
				z.F.DecSliceIntX(yyv181, false, d)
			}
		case "Parent":
			if r.TryDecodeAsNil() {
				x.Parent = 0
			} else {
				x.Parent = int(r.DecodeInt(codecSelferBitsize4788))
			}
		default:
			z.DecStructFieldNotFound(-1, yys178)
		} // end switch yys178
	} // end for yyj178
	if !yyhl178 {
		r.ReadMapEnd()
	}
}

func (x *Cat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj183 int
	var yyb183 bool
	var yyhl183 bool = l >= 0
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize4788))
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Relatives = nil
	} else {
		yyv186 := &x.Relatives
		z.F.DecSliceIntX(yyv186, false, d)
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Parent = 0
	} else {
		x.Parent = int(r.DecodeInt(codecSelferBitsize4788))
	}
	for {
		yyj183++
		if yyhl183 {
			yyb183 = yyj183 > l
		} else {
			yyb183 = r.CheckBreak()
		}
		if yyb183 {
			break
		}
		if yyj183 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj183-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CatInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep188 := !z.EncBinary()
		yy2arr188 := z.EncBasicHandle().StructToArray
		var yyfirst188 bool
		var yyq188 [1]bool
		_, _, _, _ = yysep188, yyfirst188, yyq188, yy2arr188
		const yyr188 bool = false
		if yyr188 || yy2arr188 {
			r.EncodeArrayStart(1)
		} else {
			var yynn188 int = 1
			for _, b := range yyq188 {
				if b {
					yynn188++
				}
			}
			r.EncodeMapStart(yynn188)
		}
		if yyr188 || yy2arr188 {
			z.EncFallback(x.LastChecked)
		} else {
			yyfirst188 = true
			r.EncodeString(codecSelferC_UTF84788, string("LastChecked"))
			if yysep188 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.LastChecked)
		}
		if yysep188 {
			if yyr188 || yy2arr188 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *CatInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl190 := r.ReadMapStart()
		if yyl190 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl190, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl190 := r.ReadArrayStart()
		if yyl190 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl190, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *CatInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys191Slc
	var yyhl191 bool = l >= 0
	for yyj191 := 0; ; yyj191++ {
		if yyhl191 {
			if yyj191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj191 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys191Slc = r.DecodeBytes(yys191Slc, true, true)
		yys191 := string(yys191Slc)
		if !yyhl191 {
			r.ReadMapKVSeparator()
		}
		switch yys191 {
		case "LastChecked":
			if r.TryDecodeAsNil() {
				x.LastChecked = time.Time{}
			} else {
				yyv192 := &x.LastChecked
				z.DecFallback(yyv192, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys191)
		} // end switch yys191
	} // end for yyj191
	if !yyhl191 {
		r.ReadMapEnd()
	}
}

func (x *CatInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj193 int
	var yyb193 bool
	var yyhl193 bool = l >= 0
	yyj193++
	if yyhl193 {
		yyb193 = yyj193 > l
	} else {
		yyb193 = r.CheckBreak()
	}
	if yyb193 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastChecked = time.Time{}
	} else {
		yyv194 := &x.LastChecked
		z.DecFallback(yyv194, false)
	}
	for {
		yyj193++
		if yyhl193 {
			yyb193 = yyj193 > l
		} else {
			yyb193 = r.CheckBreak()
		}
		if yyb193 {
			break
		}
		if yyj193 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj193-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NavData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep195 := !z.EncBinary()
		yy2arr195 := z.EncBasicHandle().StructToArray
		var yyfirst195 bool
		var yyq195 [3]bool
		_, _, _, _ = yysep195, yyfirst195, yyq195, yy2arr195
		const yyr195 bool = false
		if yyr195 || yy2arr195 {
			r.EncodeArrayStart(3)
		} else {
			var yynn195 int = 3
			for _, b := range yyq195 {
				if b {
					yynn195++
				}
			}
			r.EncodeMapStart(yynn195)
		}
		if yyr195 || yy2arr195 {
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		} else {
			yyfirst195 = true
			r.EncodeString(codecSelferC_UTF84788, string("Common"))
			if yysep195 {
				r.EncodeMapKVSeparator()
			}
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		}
		if yyr195 || yy2arr195 {
			if yysep195 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		} else {
			if yyfirst195 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst195 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Breadcrumbs"))
			if yysep195 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		}
		if yyr195 || yy2arr195 {
			if yysep195 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		} else {
			if yyfirst195 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst195 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Hidenav"))
			if yysep195 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		}
		if yysep195 {
			if yyr195 || yy2arr195 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *NavData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl199 := r.ReadMapStart()
		if yyl199 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl199, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl199 := r.ReadArrayStart()
		if yyl199 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl199, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *NavData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys200Slc
	var yyhl200 bool = l >= 0
	for yyj200 := 0; ; yyj200++ {
		if yyhl200 {
			if yyj200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj200 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys200Slc = r.DecodeBytes(yys200Slc, true, true)
		yys200 := string(yys200Slc)
		if !yyhl200 {
			r.ReadMapKVSeparator()
		}
		switch yys200 {
		case "Common":
			if r.TryDecodeAsNil() {
				x.Common = nil
			} else {
				yyv201 := &x.Common
				h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				})(yyv201), d)
			}
		case "Breadcrumbs":
			if r.TryDecodeAsNil() {
				x.Breadcrumbs = struct {
					BaobeiTotalHit string
					Catpath        []struct {
						Catid string
						Name  string
					}
				}{}
			} else {
				yyv202 := &x.Breadcrumbs
				z.DecFallback(yyv202, false)
			}
		case "Hidenav":
			if r.TryDecodeAsNil() {
				x.Hidenav = false
			} else {
				x.Hidenav = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys200)
		} // end switch yys200
	} // end for yyj200
	if !yyhl200 {
		r.ReadMapEnd()
	}
}

func (x *NavData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj204 int
	var yyb204 bool
	var yyhl204 bool = l >= 0
	yyj204++
	if yyhl204 {
		yyb204 = yyj204 > l
	} else {
		yyb204 = r.CheckBreak()
	}
	if yyb204 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Common = nil
	} else {
		yyv205 := &x.Common
		h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
			Text string
			Sub  []struct {
				Text  string
				Key   string
				Value string
			}
		})(yyv205), d)
	}
	yyj204++
	if yyhl204 {
		yyb204 = yyj204 > l
	} else {
		yyb204 = r.CheckBreak()
	}
	if yyb204 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Breadcrumbs = struct {
			BaobeiTotalHit string
			Catpath        []struct {
				Catid string
				Name  string
			}
		}{}
	} else {
		yyv206 := &x.Breadcrumbs
		z.DecFallback(yyv206, false)
	}
	yyj204++
	if yyhl204 {
		yyb204 = yyj204 > l
	} else {
		yyb204 = r.CheckBreak()
	}
	if yyb204 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hidenav = false
	} else {
		x.Hidenav = bool(r.DecodeBool())
	}
	for {
		yyj204++
		if yyhl204 {
			yyb204 = yyj204 > l
		} else {
			yyb204 = r.CheckBreak()
		}
		if yyb204 {
			break
		}
		if yyj204 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj204-1, "")
	}
	r.ReadArrayEnd()
}

func (x Jobs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encJobs(Jobs(x), e)
	}
}

func (x *Jobs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decJobs((*Jobs)(x), d)
}

func (x StrSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encStrSet(StrSet(x), e)
	}
}

func (x *StrSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decStrSet((*StrSet)(x), d)
}

func (x *TraceInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep208 := !z.EncBinary()
		yy2arr208 := z.EncBasicHandle().StructToArray
		var yyfirst208 bool
		var yyq208 [2]bool
		_, _, _, _ = yysep208, yyfirst208, yyq208, yy2arr208
		const yyr208 bool = false
		if yyr208 || yy2arr208 {
			r.EncodeArrayStart(2)
		} else {
			var yynn208 int = 2
			for _, b := range yyq208 {
				if b {
					yynn208++
				}
			}
			r.EncodeMapStart(yynn208)
		}
		if yyr208 || yy2arr208 {
			r.EncodeString(codecSelferC_UTF84788, string(x.What))
		} else {
			yyfirst208 = true
			r.EncodeString(codecSelferC_UTF84788, string("What"))
			if yysep208 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(x.What))
		}
		if yyr208 || yy2arr208 {
			if yysep208 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Entries == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoEntry([]*Entry(x.Entries), e)
			}
		} else {
			if yyfirst208 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst208 = true
			}
			r.EncodeString(codecSelferC_UTF84788, string("Entries"))
			if yysep208 {
				r.EncodeMapKVSeparator()
			}
			if x.Entries == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoEntry([]*Entry(x.Entries), e)
			}
		}
		if yysep208 {
			if yyr208 || yy2arr208 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *TraceInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap4788) {
		yyl211 := r.ReadMapStart()
		if yyl211 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl211, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray4788) {
		yyl211 := r.ReadArrayStart()
		if yyl211 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl211, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr4788)
	}
}

func (x *TraceInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys212Slc
	var yyhl212 bool = l >= 0
	for yyj212 := 0; ; yyj212++ {
		if yyhl212 {
			if yyj212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj212 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys212Slc = r.DecodeBytes(yys212Slc, true, true)
		yys212 := string(yys212Slc)
		if !yyhl212 {
			r.ReadMapKVSeparator()
		}
		switch yys212 {
		case "What":
			if r.TryDecodeAsNil() {
				x.What = ""
			} else {
				x.What = string(r.DecodeString())
			}
		case "Entries":
			if r.TryDecodeAsNil() {
				x.Entries = nil
			} else {
				yyv214 := &x.Entries
				h.decSlicePtrtoEntry((*[]*Entry)(yyv214), d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys212)
		} // end switch yys212
	} // end for yyj212
	if !yyhl212 {
		r.ReadMapEnd()
	}
}

func (x *TraceInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj215 int
	var yyb215 bool
	var yyhl215 bool = l >= 0
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.What = ""
	} else {
		x.What = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Entries = nil
	} else {
		yyv217 := &x.Entries
		h.decSlicePtrtoEntry((*[]*Entry)(yyv217), d)
	}
	for {
		yyj215++
		if yyhl215 {
			yyb215 = yyj215 > l
		} else {
			yyb215 = r.CheckBreak()
		}
		if yyb215 {
			break
		}
		if yyj215 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj215-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer4788) encSlicePtrtoEntry(v []*Entry, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys218 := !z.EncBinary()
	if yys218 {
		for yyi218, yyv218 := range v {
			if yyi218 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			if yyv218 == nil {
				r.EncodeNil()
			} else {
				yyv218.CodecEncodeSelf(e)
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv218 := range v {
			if yyv218 == nil {
				r.EncodeNil()
			} else {
				yyv218.CodecEncodeSelf(e)
			}
		}
	}
}

func (x codecSelfer4788) decSlicePtrtoEntry(v *[]*Entry, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv219 := *v
	yyh219, yyl219 := z.DecSliceHelperStart()

	var yyc219 bool
	if yyv219 == nil {
		if yyl219 <= 0 {
			yyv219 = make([]*Entry, 0)
		} else {
			yyv219 = make([]*Entry, yyl219)
		}
		yyc219 = true
	}

	if yyl219 == 0 {
		if len(yyv219) != 0 {
			yyv219 = yyv219[:0]
			yyc219 = true
		}
	} else if yyl219 > 0 {

		yyn219 := yyl219
		if yyl219 > cap(yyv219) {
			yyv219 = make([]*Entry, yyl219, yyl219)
			yyc219 = true

		} else if yyl219 != len(yyv219) {
			yyv219 = yyv219[:yyl219]
			yyc219 = true
		}
		yyj219 := 0
		for ; yyj219 < yyn219; yyj219++ {
			if r.TryDecodeAsNil() {
				if yyv219[yyj219] != nil {
					*yyv219[yyj219] = Entry{}
				}
			} else {
				if yyv219[yyj219] == nil {
					yyv219[yyj219] = new(Entry)
				}
				yyw220 := yyv219[yyj219]
				yyw220.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj219 := 0; !r.CheckBreak(); yyj219++ {
			if yyj219 >= len(yyv219) {
				yyv219 = append(yyv219, nil) // var yyz219 *Entry
				yyc219 = true
			}
			if yyj219 > 0 {
				yyh219.Sep(yyj219)
			}

			if yyj219 < len(yyv219) {
				if r.TryDecodeAsNil() {
					if yyv219[yyj219] != nil {
						*yyv219[yyj219] = Entry{}
					}
				} else {
					if yyv219[yyj219] == nil {
						yyv219[yyj219] = new(Entry)
					}
					yyw221 := yyv219[yyj219]
					yyw221.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh219.End()
	}
	if yyc219 {
		*v = yyv219
	}
}

func (x codecSelfer4788) encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(v map[string]struct {
	Status string
	Export bool
	Data   json.RawMessage
}, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys222 := !z.EncBinary()
	yyj222 := 0
	if yys222 {
		for yyk222, yyv222 := range v {
			if yyj222 > 0 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(yyk222))
			r.EncodeMapKVSeparator()
			z.EncFallback(yyv222)
			yyj222++
		}
		r.EncodeMapEnd()
	} else {
		for yyk222, yyv222 := range v {
			r.EncodeString(codecSelferC_UTF84788, string(yyk222))
			z.EncFallback(yyv222)
		}
	}
}

func (x codecSelfer4788) decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(v *map[string]struct {
	Status string
	Export bool
	Data   json.RawMessage
}, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv223 := *v
	yyl223 := r.ReadMapStart()
	if yyv223 == nil {
		if yyl223 > 0 {
			yyv223 = make(map[string]struct {
				Status string
				Export bool
				Data   json.RawMessage
			}, yyl223)
		} else {
			yyv223 = make(map[string]struct {
				Status string
				Export bool
				Data   json.RawMessage
			}) // supports indefinite-length, etc
		}
		*v = yyv223
	}
	if yyl223 > 0 {
		for yyj223 := 0; yyj223 < yyl223; yyj223++ {
			var yymk223 string
			if r.TryDecodeAsNil() {
				yymk223 = ""
			} else {
				yymk223 = string(r.DecodeString())
			}

			yymv223 := yyv223[yymk223]
			if r.TryDecodeAsNil() {
				yymv223 = struct {
					Status string
					Export bool
					Data   json.RawMessage
				}{}
			} else {
				yyv225 := &yymv223
				z.DecFallback(yyv225, false)
			}

			if yyv223 != nil {
				yyv223[yymk223] = yymv223
			}
		}
	} else if yyl223 < 0 {
		for yyj223 := 0; !r.CheckBreak(); yyj223++ {
			if yyj223 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk223 string
			if r.TryDecodeAsNil() {
				yymk223 = ""
			} else {
				yymk223 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv223 := yyv223[yymk223]
			if r.TryDecodeAsNil() {
				yymv223 = struct {
					Status string
					Export bool
					Data   json.RawMessage
				}{}
			} else {
				yyv227 := &yymv223
				z.DecFallback(yyv227, false)
			}

			if yyv223 != nil {
				yyv223[yymk223] = yymv223
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer4788) encTraces(v Traces, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys228 := !z.EncBinary()
	if yys228 {
		for yyi228, yyv228 := range v {
			if yyi228 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			if yyv228 == nil {
				r.EncodeNil()
			} else {
				yyv228.CodecEncodeSelf(e)
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv228 := range v {
			if yyv228 == nil {
				r.EncodeNil()
			} else {
				yyv228.CodecEncodeSelf(e)
			}
		}
	}
}

func (x codecSelfer4788) decTraces(v *Traces, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv229 := *v
	yyh229, yyl229 := z.DecSliceHelperStart()

	var yyc229 bool
	if yyv229 == nil {
		if yyl229 <= 0 {
			yyv229 = make(Traces, 0)
		} else {
			yyv229 = make(Traces, yyl229)
		}
		yyc229 = true
	}

	if yyl229 == 0 {
		if len(yyv229) != 0 {
			yyv229 = yyv229[:0]
			yyc229 = true
		}
	} else if yyl229 > 0 {

		yyn229 := yyl229
		if yyl229 > cap(yyv229) {
			yyv229 = make([]*Trace, yyl229, yyl229)
			yyc229 = true

		} else if yyl229 != len(yyv229) {
			yyv229 = yyv229[:yyl229]
			yyc229 = true
		}
		yyj229 := 0
		for ; yyj229 < yyn229; yyj229++ {
			if r.TryDecodeAsNil() {
				if yyv229[yyj229] != nil {
					*yyv229[yyj229] = Trace{}
				}
			} else {
				if yyv229[yyj229] == nil {
					yyv229[yyj229] = new(Trace)
				}
				yyw230 := yyv229[yyj229]
				yyw230.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj229 := 0; !r.CheckBreak(); yyj229++ {
			if yyj229 >= len(yyv229) {
				yyv229 = append(yyv229, nil) // var yyz229 *Trace
				yyc229 = true
			}
			if yyj229 > 0 {
				yyh229.Sep(yyj229)
			}

			if yyj229 < len(yyv229) {
				if r.TryDecodeAsNil() {
					if yyv229[yyj229] != nil {
						*yyv229[yyj229] = Trace{}
					}
				} else {
					if yyv229[yyj229] == nil {
						yyv229[yyj229] = new(Trace)
					}
					yyw231 := yyv229[yyj229]
					yyw231.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh229.End()
	}
	if yyc229 {
		*v = yyv229
	}
}

func (x codecSelfer4788) encSliceItem(v []RawItem, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys232 := !z.EncBinary()
	if yys232 {
		for yyi232, yyv232 := range v {
			if yyi232 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv232.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv232 := range v {
			yyv232.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer4788) decSliceItem(v *[]RawItem, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv233 := *v
	yyh233, yyl233 := z.DecSliceHelperStart()

	var yyc233 bool
	if yyv233 == nil {
		if yyl233 <= 0 {
			yyv233 = make([]RawItem, 0)
		} else {
			yyv233 = make([]RawItem, yyl233)
		}
		yyc233 = true
	}

	if yyl233 == 0 {
		if len(yyv233) != 0 {
			yyv233 = yyv233[:0]
			yyc233 = true
		}
	} else if yyl233 > 0 {

		yyn233 := yyl233
		if yyl233 > cap(yyv233) {
			yyv233 = make([]RawItem, yyl233, yyl233)
			yyc233 = true

		} else if yyl233 != len(yyv233) {
			yyv233 = yyv233[:yyl233]
			yyc233 = true
		}
		yyj233 := 0
		for ; yyj233 < yyn233; yyj233++ {
			if r.TryDecodeAsNil() {
				yyv233[yyj233] = RawItem{}
			} else {
				yyv234 := &yyv233[yyj233]
				yyv234.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj233 := 0; !r.CheckBreak(); yyj233++ {
			if yyj233 >= len(yyv233) {
				yyv233 = append(yyv233, RawItem{}) // var yyz233 Item
				yyc233 = true
			}
			if yyj233 > 0 {
				yyh233.Sep(yyj233)
			}

			if yyj233 < len(yyv233) {
				if r.TryDecodeAsNil() {
					yyv233[yyj233] = RawItem{}
				} else {
					yyv235 := &yyv233[yyj233]
					yyv235.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh233.End()
	}
	if yyc233 {
		*v = yyv233
	}
}

func (x codecSelfer4788) encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v []struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys236 := !z.EncBinary()
	if yys236 {
		for yyi236, yyv236 := range v {
			if yyi236 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(yyv236)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv236 := range v {
			z.EncFallback(yyv236)
		}
	}
}

func (x codecSelfer4788) decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v *[]struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv237 := *v
	yyh237, yyl237 := z.DecSliceHelperStart()

	var yyc237 bool
	if yyv237 == nil {
		if yyl237 <= 0 {
			yyv237 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, 0)
		} else {
			yyv237 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl237)
		}
		yyc237 = true
	}

	if yyl237 == 0 {
		if len(yyv237) != 0 {
			yyv237 = yyv237[:0]
			yyc237 = true
		}
	} else if yyl237 > 0 {

		yyn237 := yyl237
		if yyl237 > cap(yyv237) {
			yyv237 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl237, yyl237)
			yyc237 = true

		} else if yyl237 != len(yyv237) {
			yyv237 = yyv237[:yyl237]
			yyc237 = true
		}
		yyj237 := 0
		for ; yyj237 < yyn237; yyj237++ {
			if r.TryDecodeAsNil() {
				yyv237[yyj237] = struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}
			} else {
				yyv238 := &yyv237[yyj237]
				z.DecFallback(yyv238, false)
			}

		}

	} else {
		for yyj237 := 0; !r.CheckBreak(); yyj237++ {
			if yyj237 >= len(yyv237) {
				yyv237 = append(yyv237, struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}) // var yyz237 struct { Text string; Sub []struct { Text string; Key string; Value string } }
				yyc237 = true
			}
			if yyj237 > 0 {
				yyh237.Sep(yyj237)
			}

			if yyj237 < len(yyv237) {
				if r.TryDecodeAsNil() {
					yyv237[yyj237] = struct {
						Text string
						Sub  []struct {
							Text  string
							Key   string
							Value string
						}
					}{}
				} else {
					yyv239 := &yyv237[yyj237]
					z.DecFallback(yyv239, false)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh237.End()
	}
	if yyc237 {
		*v = yyv237
	}
}

func (x codecSelfer4788) encJobs(v Jobs, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys240 := !z.EncBinary()
	if yys240 {
		for yyi240, yyv240 := range v {
			if yyi240 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv240.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv240 := range v {
			yyv240.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer4788) decJobs(v *Jobs, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv241 := *v
	yyh241, yyl241 := z.DecSliceHelperStart()

	var yyc241 bool
	if yyv241 == nil {
		if yyl241 <= 0 {
			yyv241 = make(Jobs, 0)
		} else {
			yyv241 = make(Jobs, yyl241)
		}
		yyc241 = true
	}

	if yyl241 == 0 {
		if len(yyv241) != 0 {
			yyv241 = yyv241[:0]
			yyc241 = true
		}
	} else if yyl241 > 0 {

		yyn241 := yyl241
		if yyl241 > cap(yyv241) {
			yyv241 = make([]Job, yyl241, yyl241)
			yyc241 = true

		} else if yyl241 != len(yyv241) {
			yyv241 = yyv241[:yyl241]
			yyc241 = true
		}
		yyj241 := 0
		for ; yyj241 < yyn241; yyj241++ {
			if r.TryDecodeAsNil() {
				yyv241[yyj241] = Job{}
			} else {
				yyv242 := &yyv241[yyj241]
				yyv242.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj241 := 0; !r.CheckBreak(); yyj241++ {
			if yyj241 >= len(yyv241) {
				yyv241 = append(yyv241, Job{}) // var yyz241 Job
				yyc241 = true
			}
			if yyj241 > 0 {
				yyh241.Sep(yyj241)
			}

			if yyj241 < len(yyv241) {
				if r.TryDecodeAsNil() {
					yyv241[yyj241] = Job{}
				} else {
					yyv243 := &yyv241[yyj241]
					yyv243.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh241.End()
	}
	if yyc241 {
		*v = yyv241
	}
}

func (x codecSelfer4788) encStrSet(v StrSet, e *codec1978.Encoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys244 := !z.EncBinary()
	yyj244 := 0
	if yys244 {
		for yyk244, yyv244 := range v {
			if yyj244 > 0 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF84788, string(yyk244))
			r.EncodeMapKVSeparator()
			z.EncFallback(yyv244)
			yyj244++
		}
		r.EncodeMapEnd()
	} else {
		for yyk244, yyv244 := range v {
			r.EncodeString(codecSelferC_UTF84788, string(yyk244))
			z.EncFallback(yyv244)
		}
	}
}

func (x codecSelfer4788) decStrSet(v *StrSet, d *codec1978.Decoder) {
	var h codecSelfer4788
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv245 := *v
	yyl245 := r.ReadMapStart()
	if yyv245 == nil {
		if yyl245 > 0 {
			yyv245 = make(map[string]struct{}, yyl245)
		} else {
			yyv245 = make(map[string]struct{}) // supports indefinite-length, etc
		}
		*v = yyv245
	}
	if yyl245 > 0 {
		for yyj245 := 0; yyj245 < yyl245; yyj245++ {
			var yymk245 string
			if r.TryDecodeAsNil() {
				yymk245 = ""
			} else {
				yymk245 = string(r.DecodeString())
			}

			yymv245 := yyv245[yymk245]
			if r.TryDecodeAsNil() {
				yymv245 = struct{}{}
			} else {
				yyv247 := &yymv245
				z.DecFallback(yyv247, false)
			}

			if yyv245 != nil {
				yyv245[yymk245] = yymv245
			}
		}
	} else if yyl245 < 0 {
		for yyj245 := 0; !r.CheckBreak(); yyj245++ {
			if yyj245 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk245 string
			if r.TryDecodeAsNil() {
				yymk245 = ""
			} else {
				yymk245 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv245 := yyv245[yymk245]
			if r.TryDecodeAsNil() {
				yymv245 = struct{}{}
			} else {
				yyv249 := &yymv245
				z.DecFallback(yyv249, false)
			}

			if yyv245 != nil {
				yyv245[yymk245] = yymv245
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package taobao

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"math/big"
	"reflect"
	"runtime"
	"time"
)

const (
	codecSelferC_UTF81327         = 1
	codecSelferC_RAW1327          = 0
	codecSelverValueTypeArray1327 = 10
	codecSelverValueTypeMap1327   = 9
)

var (
	codecSelferBitsize1327                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1327 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1327 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 time.Time
		var v1 big.Rat
		_, _ = v0, v1
	}
}

func (x *RawItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep1 := !z.EncBinary()
		yy2arr1 := z.EncBasicHandle().StructToArray
		var yyfirst1 bool
		var yyq1 [18]bool
		_, _, _, _ = yysep1, yyfirst1, yyq1, yy2arr1
		const yyr1 bool = false
		if yyr1 || yy2arr1 {
			r.EncodeArrayStart(18)
		} else {
			var yynn1 int = 18
			for _, b := range yyq1 {
				if b {
					yynn1++
				}
			}
			r.EncodeMapStart(yynn1)
		}
		if yyr1 || yy2arr1 {
			r.EncodeString(codecSelferC_UTF81327, string(x.Nid))
		} else {
			yyfirst1 = true
			r.EncodeString(codecSelferC_UTF81327, string("Nid"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Nid))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Category))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Category"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Category))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Pid))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Pid"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Pid))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Title))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Title"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Title))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Raw_title))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Raw_title"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Raw_title))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Pic_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Pic_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Pic_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Detail_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Detail_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Detail_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_price))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("View_price"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_price))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_fee))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("View_fee"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_fee))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Item_loc))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Item_loc"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Item_loc))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Reserve_price))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Reserve_price"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Reserve_price))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_sales))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("View_sales"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.View_sales))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Comment_count))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Comment_count"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Comment_count))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.User_id))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("User_id"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.User_id))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Nick))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Nick"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Nick))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Shopcard)
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Shopcard"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Shopcard)
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Comment_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Comment_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Comment_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.ShopLink))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("ShopLink"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.ShopLink))
		}
		if yysep1 {
			if yyr1 || yy2arr1 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *RawItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl20 := r.ReadMapStart()
		if yyl20 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl20, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl20 := r.ReadArrayStart()
		if yyl20 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl20, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *RawItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys21Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys21Slc
	var yyhl21 bool = l >= 0
	for yyj21 := 0; ; yyj21++ {
		if yyhl21 {
			if yyj21 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj21 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys21Slc = r.DecodeBytes(yys21Slc, true, true)
		yys21 := string(yys21Slc)
		if !yyhl21 {
			r.ReadMapKVSeparator()
		}
		switch yys21 {
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = ""
			} else {
				x.Nid = string(r.DecodeString())
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = ""
			} else {
				x.Category = string(r.DecodeString())
			}
		case "Pid":
			if r.TryDecodeAsNil() {
				x.Pid = ""
			} else {
				x.Pid = string(r.DecodeString())
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Raw_title":
			if r.TryDecodeAsNil() {
				x.Raw_title = ""
			} else {
				x.Raw_title = string(r.DecodeString())
			}
		case "Pic_url":
			if r.TryDecodeAsNil() {
				x.Pic_url = ""
			} else {
				x.Pic_url = string(r.DecodeString())
			}
		case "Detail_url":
			if r.TryDecodeAsNil() {
				x.Detail_url = ""
			} else {
				x.Detail_url = string(r.DecodeString())
			}
		case "View_price":
			if r.TryDecodeAsNil() {
				x.View_price = ""
			} else {
				x.View_price = string(r.DecodeString())
			}
		case "View_fee":
			if r.TryDecodeAsNil() {
				x.View_fee = ""
			} else {
				x.View_fee = string(r.DecodeString())
			}
		case "Item_loc":
			if r.TryDecodeAsNil() {
				x.Item_loc = ""
			} else {
				x.Item_loc = string(r.DecodeString())
			}
		case "Reserve_price":
			if r.TryDecodeAsNil() {
				x.Reserve_price = ""
			} else {
				x.Reserve_price = string(r.DecodeString())
			}
		case "View_sales":
			if r.TryDecodeAsNil() {
				x.View_sales = ""
			} else {
				x.View_sales = string(r.DecodeString())
			}
		case "Comment_count":
			if r.TryDecodeAsNil() {
				x.Comment_count = ""
			} else {
				x.Comment_count = string(r.DecodeString())
			}
		case "User_id":
			if r.TryDecodeAsNil() {
				x.User_id = ""
			} else {
				x.User_id = string(r.DecodeString())
			}
		case "Nick":
			if r.TryDecodeAsNil() {
				x.Nick = ""
			} else {
				x.Nick = string(r.DecodeString())
			}
		case "Shopcard":
			if r.TryDecodeAsNil() {
				x.Shopcard = struct {
					LevelClasses    []struct{ LevelClass string }
					IsTmall         bool
					Delivery        []int
					Description     []int
					Service         []int
					EncryptedUserId string
					SellerCredit    int
					TotalRate       int
				}{}
			} else {
				yyv37 := &x.Shopcard
				z.DecFallback(yyv37, false)
			}
		case "Comment_url":
			if r.TryDecodeAsNil() {
				x.Comment_url = ""
			} else {
				x.Comment_url = string(r.DecodeString())
			}
		case "ShopLink":
			if r.TryDecodeAsNil() {
				x.ShopLink = ""
			} else {
				x.ShopLink = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys21)
		} // end switch yys21
	} // end for yyj21
	if !yyhl21 {
		r.ReadMapEnd()
	}
}

func (x *RawItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj40 int
	var yyb40 bool
	var yyhl40 bool = l >= 0
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Nid = ""
	} else {
		x.Nid = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = ""
	} else {
		x.Category = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pid = ""
	} else {
		x.Pid = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Raw_title = ""
	} else {
		x.Raw_title = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pic_url = ""
	} else {
		x.Pic_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Detail_url = ""
	} else {
		x.Detail_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_price = ""
	} else {
		x.View_price = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_fee = ""
	} else {
		x.View_fee = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Item_loc = ""
	} else {
		x.Item_loc = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reserve_price = ""
	} else {
		x.Reserve_price = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_sales = ""
	} else {
		x.View_sales = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_count = ""
	} else {
		x.Comment_count = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User_id = ""
	} else {
		x.User_id = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nick = ""
	} else {
		x.Nick = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Shopcard = struct {
			LevelClasses    []struct{ LevelClass string }
			IsTmall         bool
			Delivery        []int
			Description     []int
			Service         []int
			EncryptedUserId string
			SellerCredit    int
			TotalRate       int
		}{}
	} else {
		yyv56 := &x.Shopcard
		z.DecFallback(yyv56, false)
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_url = ""
	} else {
		x.Comment_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ShopLink = ""
	} else {
		x.ShopLink = string(r.DecodeString())
	}
	for {
		yyj40++
		if yyhl40 {
			yyb40 = yyj40 > l
		} else {
			yyb40 = r.CheckBreak()
		}
		if yyb40 {
			break
		}
		if yyj40 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj40-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Item) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep59 := !z.EncBinary()
		yy2arr59 := z.EncBasicHandle().StructToArray
		var yyfirst59 bool
		var yyq59 [13]bool
		_, _, _, _ = yysep59, yyfirst59, yyq59, yy2arr59
		const yyr59 bool = false
		if yyr59 || yy2arr59 {
			r.EncodeArrayStart(13)
		} else {
			var yynn59 int = 13
			for _, b := range yyq59 {
				if b {
					yynn59++
				}
			}
			r.EncodeMapStart(yynn59)
		}
		if yyr59 || yy2arr59 {
			r.EncodeInt(int64(x.Nid))
		} else {
			yyfirst59 = true
			r.EncodeString(codecSelferC_UTF81327, string("Nid"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Nid))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Category))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Category"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Category))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Title))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Title"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Title))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Price == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Price)
			}
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Price"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			if x.Price == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Price)
			}
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Location))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Location"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Location))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Sales))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Sales"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Sales))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Comments))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Comments"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Comments))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Seller))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Seller"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Seller))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.SellerEncryptedId))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("SellerEncryptedId"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.SellerEncryptedId))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.SellerName))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("SellerName"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.SellerName))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			if x.SellerLevels == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1327, []byte(x.SellerLevels))
			}
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("SellerLevels"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			if x.SellerLevels == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1327, []byte(x.SellerLevels))
			}
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.SellerIsTmall))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("SellerIsTmall"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.SellerIsTmall))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.SellerCredit))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("SellerCredit"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.SellerCredit))
		}
		if yysep59 {
			if yyr59 || yy2arr59 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Item) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl73 := r.ReadMapStart()
		if yyl73 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl73, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl73 := r.ReadArrayStart()
		if yyl73 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl73, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *Item) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys74Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys74Slc
	var yyhl74 bool = l >= 0
	for yyj74 := 0; ; yyj74++ {
		if yyhl74 {
			if yyj74 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj74 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys74Slc = r.DecodeBytes(yys74Slc, true, true)
		yys74 := string(yys74Slc)
		if !yyhl74 {
			r.ReadMapKVSeparator()
		}
		switch yys74 {
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = 0
			} else {
				x.Nid = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = 0
			} else {
				x.Category = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Price":
			if r.TryDecodeAsNil() {
				if x.Price != nil {
					x.Price = nil
				}
			} else {
				if x.Price == nil {
					x.Price = new(big.Rat)
				}
				z.DecFallback(x.Price, false)
			}
		case "Location":
			if r.TryDecodeAsNil() {
				x.Location = ""
			} else {
				x.Location = string(r.DecodeString())
			}
		case "Sales":
			if r.TryDecodeAsNil() {
				x.Sales = 0
			} else {
				x.Sales = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Comments":
			if r.TryDecodeAsNil() {
				x.Comments = 0
			} else {
				x.Comments = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Seller":
			if r.TryDecodeAsNil() {
				x.Seller = 0
			} else {
				x.Seller = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "SellerEncryptedId":
			if r.TryDecodeAsNil() {
				x.SellerEncryptedId = ""
			} else {
				x.SellerEncryptedId = string(r.DecodeString())
			}
		case "SellerName":
			if r.TryDecodeAsNil() {
				x.SellerName = ""
			} else {
				x.SellerName = string(r.DecodeString())
			}
		case "SellerLevels":
			if r.TryDecodeAsNil() {
				x.SellerLevels = nil
			} else {
				yyv85 := &x.SellerLevels
				*yyv85 = r.DecodeBytes(*(*[]byte)(yyv85), false, false)
			}
		case "SellerIsTmall":
			if r.TryDecodeAsNil() {
				x.SellerIsTmall = false
			} else {
				x.SellerIsTmall = bool(r.DecodeBool())
			}
		case "SellerCredit":
			if r.TryDecodeAsNil() {
				x.SellerCredit = 0
			} else {
				x.SellerCredit = int(r.DecodeInt(codecSelferBitsize1327))
			}
		default:
			z.DecStructFieldNotFound(-1, yys74)
		} // end switch yys74
	} // end for yyj74
	if !yyhl74 {
		r.ReadMapEnd()
	}
}

func (x *Item) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Nid = 0
	} else {
		x.Nid = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = 0
	} else {
		x.Category = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Price != nil {
			x.Price = nil
		}
	} else {
		if x.Price == nil {
			x.Price = new(big.Rat)
		}
		z.DecFallback(x.Price, false)
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Location = ""
	} else {
		x.Location = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Sales = 0
	} else {
		x.Sales = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comments = 0
	} else {
		x.Comments = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Seller = 0
	} else {
		x.Seller = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerEncryptedId = ""
	} else {
		x.SellerEncryptedId = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerName = ""
	} else {
		x.SellerName = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerLevels = nil
	} else {
		yyv99 := &x.SellerLevels
		*yyv99 = r.DecodeBytes(*(*[]byte)(yyv99), false, false)
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerIsTmall = false
	} else {
		x.SellerIsTmall = bool(r.DecodeBool())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerCredit = 0
	} else {
		x.SellerCredit = int(r.DecodeInt(codecSelferBitsize1327))
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		if yyj88 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep102 := !z.EncBinary()
		yy2arr102 := z.EncBasicHandle().StructToArray
		var yyfirst102 bool
		var yyq102 [3]bool
		_, _, _, _ = yysep102, yyfirst102, yyq102, yy2arr102
		const yyr102 bool = false
		if yyr102 || yy2arr102 {
			r.EncodeArrayStart(3)
		} else {
			var yynn102 int = 3
			for _, b := range yyq102 {
				if b {
					yynn102++
				}
			}
			r.EncodeMapStart(yynn102)
		}
		if yyr102 || yy2arr102 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst102 = true
			r.EncodeString(codecSelferC_UTF81327, string("Cat"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr102 || yy2arr102 {
			if yysep102 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst102 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst102 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Page"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr102 || yy2arr102 {
			if yysep102 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Done))
		} else {
			if yyfirst102 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst102 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Done"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Done))
		}
		if yysep102 {
			if yyr102 || yy2arr102 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl106 := r.ReadMapStart()
		if yyl106 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl106, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl106 := r.ReadArrayStart()
		if yyl106 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl106, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys107Slc
	var yyhl107 bool = l >= 0
	for yyj107 := 0; ; yyj107++ {
		if yyhl107 {
			if yyj107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj107 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys107Slc = r.DecodeBytes(yys107Slc, true, true)
		yys107 := string(yys107Slc)
		if !yyhl107 {
			r.ReadMapKVSeparator()
		}
		switch yys107 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Done":
			if r.TryDecodeAsNil() {
				x.Done = false
			} else {
				x.Done = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys107)
		} // end switch yys107
	} // end for yyj107
	if !yyhl107 {
		r.ReadMapEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj111 int
	var yyb111 bool
	var yyhl111 bool = l >= 0
	yyj111++
	if yyhl111 {
		yyb111 = yyj111 > l
	} else {
		yyb111 = r.CheckBreak()
	}
	if yyb111 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj111++
	if yyhl111 {
		yyb111 = yyj111 > l
	} else {
		yyb111 = r.CheckBreak()
	}
	if yyb111 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj111++
	if yyhl111 {
		yyb111 = yyj111 > l
	} else {
		yyb111 = r.CheckBreak()
	}
	if yyb111 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Done = false
	} else {
		x.Done = bool(r.DecodeBool())
	}
	for {
		yyj111++
		if yyhl111 {
			yyb111 = yyj111 > l
		} else {
			yyb111 = r.CheckBreak()
		}
		if yyb111 {
			break
		}
		if yyj111 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj111-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Cat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep115 := !z.EncBinary()
		yy2arr115 := z.EncBasicHandle().StructToArray
		var yyfirst115 bool
		var yyq115 [4]bool
		_, _, _, _ = yysep115, yyfirst115, yyq115, yy2arr115
		const yyr115 bool = false
		if yyr115 || yy2arr115 {
			r.EncodeArrayStart(4)
		} else {
			var yynn115 int = 4
			for _, b := range yyq115 {
				if b {
					yynn115++
				}
			}
			r.EncodeMapStart(yynn115)
		}
		if yyr115 || yy2arr115 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst115 = true
			r.EncodeString(codecSelferC_UTF81327, string("Cat"))
			if yysep115 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr115 || yy2arr115 {
			if yysep115 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Name))
		} else {
			if yyfirst115 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst115 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Name"))
			if yysep115 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Name))
		}
		if yyr115 || yy2arr115 {
			if yysep115 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		} else {
			if yyfirst115 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst115 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Relatives"))
			if yysep115 {
				r.EncodeMapKVSeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		}
		if yyr115 || yy2arr115 {
			if yysep115 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Parent))
		} else {
			if yyfirst115 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst115 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Parent"))
			if yysep115 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Parent))
		}
		if yysep115 {
			if yyr115 || yy2arr115 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Cat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl120 := r.ReadMapStart()
		if yyl120 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl120, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl120 := r.ReadArrayStart()
		if yyl120 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl120, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *Cat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys121Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys121Slc
	var yyhl121 bool = l >= 0
	for yyj121 := 0; ; yyj121++ {
		if yyhl121 {
			if yyj121 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj121 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys121Slc = r.DecodeBytes(yys121Slc, true, true)
		yys121 := string(yys121Slc)
		if !yyhl121 {
			r.ReadMapKVSeparator()
		}
		switch yys121 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Relatives":
			if r.TryDecodeAsNil() {
				x.Relatives = nil
			} else {
				yyv124 := &x.Relatives
				z.F.DecSliceIntX(yyv124, false, d)
			}
		case "Parent":
			if r.TryDecodeAsNil() {
				x.Parent = 0
			} else {
				x.Parent = int(r.DecodeInt(codecSelferBitsize1327))
			}
		default:
			z.DecStructFieldNotFound(-1, yys121)
		} // end switch yys121
	} // end for yyj121
	if !yyhl121 {
		r.ReadMapEnd()
	}
}

func (x *Cat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Relatives = nil
	} else {
		yyv129 := &x.Relatives
		z.F.DecSliceIntX(yyv129, false, d)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Parent = 0
	} else {
		x.Parent = int(r.DecodeInt(codecSelferBitsize1327))
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		if yyj126 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CatStat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep131 := !z.EncBinary()
		yy2arr131 := z.EncBasicHandle().StructToArray
		var yyfirst131 bool
		var yyq131 [2]bool
		_, _, _, _ = yysep131, yyfirst131, yyq131, yy2arr131
		const yyr131 bool = false
		if yyr131 || yy2arr131 {
			r.EncodeArrayStart(2)
		} else {
			var yynn131 int = 2
			for _, b := range yyq131 {
				if b {
					yynn131++
				}
			}
			r.EncodeMapStart(yynn131)
		}
		if yyr131 || yy2arr131 {
			r.EncodeInt(int64(x.Items))
		} else {
			yyfirst131 = true
			r.EncodeString(codecSelferC_UTF81327, string("Items"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Items))
		}
		if yyr131 || yy2arr131 {
			if yysep131 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Sales))
		} else {
			if yyfirst131 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst131 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Sales"))
			if yysep131 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Sales))
		}
		if yysep131 {
			if yyr131 || yy2arr131 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *CatStat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl134 := r.ReadMapStart()
		if yyl134 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl134, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl134 := r.ReadArrayStart()
		if yyl134 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl134, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *CatStat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj135 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		if !yyhl135 {
			r.ReadMapKVSeparator()
		}
		switch yys135 {
		case "Items":
			if r.TryDecodeAsNil() {
				x.Items = 0
			} else {
				x.Items = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Sales":
			if r.TryDecodeAsNil() {
				x.Sales = 0
			} else {
				x.Sales = int(r.DecodeInt(codecSelferBitsize1327))
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	if !yyhl135 {
		r.ReadMapEnd()
	}
}

func (x *CatStat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj138 int
	var yyb138 bool
	var yyhl138 bool = l >= 0
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = 0
	} else {
		x.Items = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Sales = 0
	} else {
		x.Sales = int(r.DecodeInt(codecSelferBitsize1327))
	}
	for {
		yyj138++
		if yyhl138 {
			yyb138 = yyj138 > l
		} else {
			yyb138 = r.CheckBreak()
		}
		if yyb138 {
			break
		}
		if yyj138 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj138-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NavData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep141 := !z.EncBinary()
		yy2arr141 := z.EncBasicHandle().StructToArray
		var yyfirst141 bool
		var yyq141 [3]bool
		_, _, _, _ = yysep141, yyfirst141, yyq141, yy2arr141
		const yyr141 bool = false
		if yyr141 || yy2arr141 {
			r.EncodeArrayStart(3)
		} else {
			var yynn141 int = 3
			for _, b := range yyq141 {
				if b {
					yynn141++
				}
			}
			r.EncodeMapStart(yynn141)
		}
		if yyr141 || yy2arr141 {
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		} else {
			yyfirst141 = true
			r.EncodeString(codecSelferC_UTF81327, string("Common"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		}
		if yyr141 || yy2arr141 {
			if yysep141 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		} else {
			if yyfirst141 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst141 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Breadcrumbs"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		}
		if yyr141 || yy2arr141 {
			if yysep141 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		} else {
			if yyfirst141 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst141 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Hidenav"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		}
		if yysep141 {
			if yyr141 || yy2arr141 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *NavData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl145 := r.ReadMapStart()
		if yyl145 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl145, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl145 := r.ReadArrayStart()
		if yyl145 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl145, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *NavData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys146Slc
	var yyhl146 bool = l >= 0
	for yyj146 := 0; ; yyj146++ {
		if yyhl146 {
			if yyj146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj146 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys146Slc = r.DecodeBytes(yys146Slc, true, true)
		yys146 := string(yys146Slc)
		if !yyhl146 {
			r.ReadMapKVSeparator()
		}
		switch yys146 {
		case "Common":
			if r.TryDecodeAsNil() {
				x.Common = nil
			} else {
				yyv147 := &x.Common
				h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				})(yyv147), d)
			}
		case "Breadcrumbs":
			if r.TryDecodeAsNil() {
				x.Breadcrumbs = struct {
					BaobeiTotalHit string
					Catpath        []struct {
						Catid string
						Name  string
					}
				}{}
			} else {
				yyv148 := &x.Breadcrumbs
				z.DecFallback(yyv148, false)
			}
		case "Hidenav":
			if r.TryDecodeAsNil() {
				x.Hidenav = false
			} else {
				x.Hidenav = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys146)
		} // end switch yys146
	} // end for yyj146
	if !yyhl146 {
		r.ReadMapEnd()
	}
}

func (x *NavData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj150 int
	var yyb150 bool
	var yyhl150 bool = l >= 0
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Common = nil
	} else {
		yyv151 := &x.Common
		h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
			Text string
			Sub  []struct {
				Text  string
				Key   string
				Value string
			}
		})(yyv151), d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Breadcrumbs = struct {
			BaobeiTotalHit string
			Catpath        []struct {
				Catid string
				Name  string
			}
		}{}
	} else {
		yyv152 := &x.Breadcrumbs
		z.DecFallback(yyv152, false)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hidenav = false
	} else {
		x.Hidenav = bool(r.DecodeBool())
	}
	for {
		yyj150++
		if yyhl150 {
			yyb150 = yyj150 > l
		} else {
			yyb150 = r.CheckBreak()
		}
		if yyb150 {
			break
		}
		if yyj150 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj150-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BgCat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep154 := !z.EncBinary()
		yy2arr154 := z.EncBasicHandle().StructToArray
		var yyfirst154 bool
		var yyq154 [4]bool
		_, _, _, _ = yysep154, yyfirst154, yyq154, yy2arr154
		const yyr154 bool = false
		if yyr154 || yy2arr154 {
			r.EncodeArrayStart(4)
		} else {
			var yynn154 int = 4
			for _, b := range yyq154 {
				if b {
					yynn154++
				}
			}
			r.EncodeMapStart(yynn154)
		}
		if yyr154 || yy2arr154 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst154 = true
			r.EncodeString(codecSelferC_UTF81327, string("Cat"))
			if yysep154 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr154 || yy2arr154 {
			if yysep154 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Name))
		} else {
			if yyfirst154 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst154 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Name"))
			if yysep154 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF81327, string(x.Name))
		}
		if yyr154 || yy2arr154 {
			if yysep154 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Subs == nil {
				r.EncodeNil()
			} else {
				h.encIntSet(IntSet(x.Subs), e)
			}
		} else {
			if yyfirst154 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst154 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("Subs"))
			if yysep154 {
				r.EncodeMapKVSeparator()
			}
			if x.Subs == nil {
				r.EncodeNil()
			} else {
				h.encIntSet(IntSet(x.Subs), e)
			}
		}
		if yyr154 || yy2arr154 {
			if yysep154 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.LastUpdated)
		} else {
			if yyfirst154 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst154 = true
			}
			r.EncodeString(codecSelferC_UTF81327, string("LastUpdated"))
			if yysep154 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.LastUpdated)
		}
		if yysep154 {
			if yyr154 || yy2arr154 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *BgCat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap1327) {
		yyl159 := r.ReadMapStart()
		if yyl159 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl159, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray1327) {
		yyl159 := r.ReadArrayStart()
		if yyl159 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl159, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr1327)
	}
}

func (x *BgCat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj160 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		if !yyhl160 {
			r.ReadMapKVSeparator()
		}
		switch yys160 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Subs":
			if r.TryDecodeAsNil() {
				x.Subs = nil
			} else {
				yyv163 := &x.Subs
				h.decIntSet((*IntSet)(yyv163), d)
			}
		case "LastUpdated":
			if r.TryDecodeAsNil() {
				x.LastUpdated = time.Time{}
			} else {
				yyv164 := &x.LastUpdated
				z.DecFallback(yyv164, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadMapEnd()
	}
}

func (x *BgCat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj165 int
	var yyb165 bool
	var yyhl165 bool = l >= 0
	yyj165++
	if yyhl165 {
		yyb165 = yyj165 > l
	} else {
		yyb165 = r.CheckBreak()
	}
	if yyb165 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize1327))
	}
	yyj165++
	if yyhl165 {
		yyb165 = yyj165 > l
	} else {
		yyb165 = r.CheckBreak()
	}
	if yyb165 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj165++
	if yyhl165 {
		yyb165 = yyj165 > l
	} else {
		yyb165 = r.CheckBreak()
	}
	if yyb165 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Subs = nil
	} else {
		yyv168 := &x.Subs
		h.decIntSet((*IntSet)(yyv168), d)
	}
	yyj165++
	if yyhl165 {
		yyb165 = yyj165 > l
	} else {
		yyb165 = r.CheckBreak()
	}
	if yyb165 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastUpdated = time.Time{}
	} else {
		yyv169 := &x.LastUpdated
		z.DecFallback(yyv169, false)
	}
	for {
		yyj165++
		if yyhl165 {
			yyb165 = yyj165 > l
		} else {
			yyb165 = r.CheckBreak()
		}
		if yyb165 {
			break
		}
		if yyj165 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj165-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1327) encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v []struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys170 := !z.EncBinary()
	if yys170 {
		for yyi170, yyv170 := range v {
			if yyi170 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(yyv170)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv170 := range v {
			z.EncFallback(yyv170)
		}
	}
}

func (x codecSelfer1327) decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v *[]struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv171 := *v
	yyh171, yyl171 := z.DecSliceHelperStart()

	var yyc171 bool
	if yyv171 == nil {
		if yyl171 <= 0 {
			yyv171 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, 0)
		} else {
			yyv171 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl171)
		}
		yyc171 = true
	}

	if yyl171 == 0 {
		if len(yyv171) != 0 {
			yyv171 = yyv171[:0]
			yyc171 = true
		}
	} else if yyl171 > 0 {

		yyn171 := yyl171
		if yyl171 > cap(yyv171) {
			yyv171 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl171, yyl171)
			yyc171 = true

		} else if yyl171 != len(yyv171) {
			yyv171 = yyv171[:yyl171]
			yyc171 = true
		}
		yyj171 := 0
		for ; yyj171 < yyn171; yyj171++ {
			if r.TryDecodeAsNil() {
				yyv171[yyj171] = struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}
			} else {
				yyv172 := &yyv171[yyj171]
				z.DecFallback(yyv172, false)
			}

		}

	} else {
		for yyj171 := 0; !r.CheckBreak(); yyj171++ {
			if yyj171 >= len(yyv171) {
				yyv171 = append(yyv171, struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}) // var yyz171 struct { Text string; Sub []struct { Text string; Key string; Value string } }
				yyc171 = true
			}
			if yyj171 > 0 {
				yyh171.Sep(yyj171)
			}

			if yyj171 < len(yyv171) {
				if r.TryDecodeAsNil() {
					yyv171[yyj171] = struct {
						Text string
						Sub  []struct {
							Text  string
							Key   string
							Value string
						}
					}{}
				} else {
					yyv173 := &yyv171[yyj171]
					z.DecFallback(yyv173, false)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh171.End()
	}
	if yyc171 {
		*v = yyv171
	}
}

func (x codecSelfer1327) encIntSet(v IntSet, e *codec1978.Encoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys174 := !z.EncBinary()
	yyj174 := 0
	if yys174 {
		for yyk174, yyv174 := range v {
			if yyj174 > 0 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeInt(int64(yyk174))
			r.EncodeMapKVSeparator()
			z.EncFallback(yyv174)
			yyj174++
		}
		r.EncodeMapEnd()
	} else {
		for yyk174, yyv174 := range v {
			r.EncodeInt(int64(yyk174))
			z.EncFallback(yyv174)
		}
	}
}

func (x codecSelfer1327) decIntSet(v *IntSet, d *codec1978.Decoder) {
	var h codecSelfer1327
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv175 := *v
	yyl175 := r.ReadMapStart()
	if yyv175 == nil {
		if yyl175 > 0 {
			yyv175 = make(map[int]struct{}, yyl175)
		} else {
			yyv175 = make(map[int]struct{}) // supports indefinite-length, etc
		}
		*v = yyv175
	}
	if yyl175 > 0 {
		for yyj175 := 0; yyj175 < yyl175; yyj175++ {
			var yymk175 int
			if r.TryDecodeAsNil() {
				yymk175 = 0
			} else {
				yymk175 = int(r.DecodeInt(codecSelferBitsize1327))
			}

			yymv175 := yyv175[yymk175]
			if r.TryDecodeAsNil() {
				yymv175 = struct{}{}
			} else {
				yyv177 := &yymv175
				z.DecFallback(yyv177, false)
			}

			if yyv175 != nil {
				yyv175[yymk175] = yymv175
			}
		}
	} else if yyl175 < 0 {
		for yyj175 := 0; !r.CheckBreak(); yyj175++ {
			if yyj175 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk175 int
			if r.TryDecodeAsNil() {
				yymk175 = 0
			} else {
				yymk175 = int(r.DecodeInt(codecSelferBitsize1327))
			}

			r.ReadMapKVSeparator()
			yymv175 := yyv175[yymk175]
			if r.TryDecodeAsNil() {
				yymv175 = struct{}{}
			} else {
				yyv179 := &yymv175
				z.DecFallback(yyv179, false)
			}

			if yyv175 != nil {
				yyv175[yymk175] = yymv175
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

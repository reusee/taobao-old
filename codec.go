// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package taobao

import (
	"encoding/json"
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
	"sync"
	"time"
)

const (
	codecSelferC_UTF83471         = 1
	codecSelferC_RAW3471          = 0
	codecSelverValueTypeArray3471 = 10
	codecSelverValueTypeMap3471   = 9
)

var (
	codecSelferBitsize3471                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr3471 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer3471 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 sync.RWMutex
		var v1 json.RawMessage
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *ClientSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep1 := !z.EncBinary()
		yy2arr1 := z.EncBasicHandle().StructToArray
		var yyfirst1 bool
		var yyq1 [0]bool
		_, _, _, _ = yysep1, yyfirst1, yyq1, yy2arr1
		const yyr1 bool = false
		if yyr1 || yy2arr1 {
			r.EncodeArrayStart(0)
		} else {
			var yynn1 int = 0
			for _, b := range yyq1 {
				if b {
					yynn1++
				}
			}
			r.EncodeMapStart(yynn1)
		}
		if yysep1 {
			if yyr1 || yy2arr1 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *ClientSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl2 := r.ReadMapStart()
		if yyl2 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl2 := r.ReadArrayStart()
		if yyl2 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *ClientSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		if !yyhl3 {
			r.ReadMapKVSeparator()
		}
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	if !yyhl3 {
		r.ReadMapEnd()
	}
}

func (x *ClientSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		if yyj4 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ClientInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep5 := !z.EncBinary()
		yy2arr5 := z.EncBasicHandle().StructToArray
		var yyfirst5 bool
		var yyq5 [1]bool
		_, _, _, _ = yysep5, yyfirst5, yyq5, yy2arr5
		const yyr5 bool = false
		if yyr5 || yy2arr5 {
			r.EncodeArrayStart(1)
		} else {
			var yynn5 int = 1
			for _, b := range yyq5 {
				if b {
					yynn5++
				}
			}
			r.EncodeMapStart(yynn5)
		}
		if yyr5 || yy2arr5 {
			r.EncodeString(codecSelferC_UTF83471, string(x.HttpProxyAddr))
		} else {
			yyfirst5 = true
			r.EncodeString(codecSelferC_UTF83471, string("HttpProxyAddr"))
			if yysep5 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.HttpProxyAddr))
		}
		if yysep5 {
			if yyr5 || yy2arr5 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *ClientInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl7 := r.ReadMapStart()
		if yyl7 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl7, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl7 := r.ReadArrayStart()
		if yyl7 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl7, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *ClientInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj8 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		if !yyhl8 {
			r.ReadMapKVSeparator()
		}
		switch yys8 {
		case "HttpProxyAddr":
			if r.TryDecodeAsNil() {
				x.HttpProxyAddr = ""
			} else {
				x.HttpProxyAddr = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadMapEnd()
	}
}

func (x *ClientInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HttpProxyAddr = ""
	} else {
		x.HttpProxyAddr = string(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		if yyj10 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x ClientState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeUint(uint64(x))
}

func (x *ClientState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*((*uint8)(x)) = uint8(r.DecodeUint(8))
}

func (x *PageConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep12 := !z.EncBinary()
		yy2arr12 := z.EncBasicHandle().StructToArray
		var yyfirst12 bool
		var yyq12 [2]bool
		_, _, _, _ = yysep12, yyfirst12, yyq12, yy2arr12
		const yyr12 bool = false
		if yyr12 || yy2arr12 {
			r.EncodeArrayStart(2)
		} else {
			var yynn12 int = 2
			for _, b := range yyq12 {
				if b {
					yynn12++
				}
			}
			r.EncodeMapStart(yynn12)
		}
		if yyr12 || yy2arr12 {
			if x.Mods == nil {
				r.EncodeNil()
			} else {
				h.encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				}(x.Mods), e)
			}
		} else {
			yyfirst12 = true
			r.EncodeString(codecSelferC_UTF83471, string("Mods"))
			if yysep12 {
				r.EncodeMapKVSeparator()
			}
			if x.Mods == nil {
				r.EncodeNil()
			} else {
				h.encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				}(x.Mods), e)
			}
		}
		if yyr12 || yy2arr12 {
			if yysep12 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.MainInfo)
		} else {
			if yyfirst12 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst12 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("MainInfo"))
			if yysep12 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.MainInfo)
		}
		if yysep12 {
			if yyr12 || yy2arr12 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *PageConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl15 := r.ReadMapStart()
		if yyl15 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl15, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl15 := r.ReadArrayStart()
		if yyl15 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl15, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *PageConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys16Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys16Slc
	var yyhl16 bool = l >= 0
	for yyj16 := 0; ; yyj16++ {
		if yyhl16 {
			if yyj16 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj16 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys16Slc = r.DecodeBytes(yys16Slc, true, true)
		yys16 := string(yys16Slc)
		if !yyhl16 {
			r.ReadMapKVSeparator()
		}
		switch yys16 {
		case "Mods":
			if r.TryDecodeAsNil() {
				x.Mods = nil
			} else {
				yyv17 := &x.Mods
				h.decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0((*map[string]struct {
					Status string
					Export bool
					Data   json.RawMessage
				})(yyv17), d)
			}
		case "MainInfo":
			if r.TryDecodeAsNil() {
				x.MainInfo = struct{ SrpGlobal struct{ Cat string } }{}
			} else {
				yyv18 := &x.MainInfo
				z.DecFallback(yyv18, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys16)
		} // end switch yys16
	} // end for yyj16
	if !yyhl16 {
		r.ReadMapEnd()
	}
}

func (x *PageConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Mods = nil
	} else {
		yyv20 := &x.Mods
		h.decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0((*map[string]struct {
			Status string
			Export bool
			Data   json.RawMessage
		})(yyv20), d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MainInfo = struct{ SrpGlobal struct{ Cat string } }{}
	} else {
		yyv21 := &x.MainInfo
		z.DecFallback(yyv21, false)
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		if yyj19 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Err) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep22 := !z.EncBinary()
		yy2arr22 := z.EncBasicHandle().StructToArray
		var yyfirst22 bool
		var yyq22 [3]bool
		_, _, _, _ = yysep22, yyfirst22, yyq22, yy2arr22
		const yyr22 bool = false
		if yyr22 || yy2arr22 {
			r.EncodeArrayStart(3)
		} else {
			var yynn22 int = 3
			for _, b := range yyq22 {
				if b {
					yynn22++
				}
			}
			r.EncodeMapStart(yynn22)
		}
		if yyr22 || yy2arr22 {
			r.EncodeString(codecSelferC_UTF83471, string(x.Pkg))
		} else {
			yyfirst22 = true
			r.EncodeString(codecSelferC_UTF83471, string("Pkg"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Pkg))
		}
		if yyr22 || yy2arr22 {
			if yysep22 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Info))
		} else {
			if yyfirst22 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst22 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Info"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Info))
		}
		if yyr22 || yy2arr22 {
			if yysep22 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Err == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Err)
			}
		} else {
			if yyfirst22 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst22 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Err"))
			if yysep22 {
				r.EncodeMapKVSeparator()
			}
			if x.Err == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Err)
			}
		}
		if yysep22 {
			if yyr22 || yy2arr22 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Err) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl26 := r.ReadMapStart()
		if yyl26 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl26, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl26 := r.ReadArrayStart()
		if yyl26 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl26, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Err) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys27Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys27Slc
	var yyhl27 bool = l >= 0
	for yyj27 := 0; ; yyj27++ {
		if yyhl27 {
			if yyj27 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj27 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys27Slc = r.DecodeBytes(yys27Slc, true, true)
		yys27 := string(yys27Slc)
		if !yyhl27 {
			r.ReadMapKVSeparator()
		}
		switch yys27 {
		case "Pkg":
			if r.TryDecodeAsNil() {
				x.Pkg = ""
			} else {
				x.Pkg = string(r.DecodeString())
			}
		case "Info":
			if r.TryDecodeAsNil() {
				x.Info = ""
			} else {
				x.Info = string(r.DecodeString())
			}
		case "Err":
			if r.TryDecodeAsNil() {
				x.Err = nil
			} else {
				yyv30 := &x.Err
				z.DecFallback(yyv30, true)
			}
		default:
			z.DecStructFieldNotFound(-1, yys27)
		} // end switch yys27
	} // end for yyj27
	if !yyhl27 {
		r.ReadMapEnd()
	}
}

func (x *Err) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj31 int
	var yyb31 bool
	var yyhl31 bool = l >= 0
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Pkg = ""
	} else {
		x.Pkg = string(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Info = ""
	} else {
		x.Info = string(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Err = nil
	} else {
		yyv34 := &x.Err
		z.DecFallback(yyv34, true)
	}
	for {
		yyj31++
		if yyhl31 {
			yyb31 = yyj31 > l
		} else {
			yyb31 = r.CheckBreak()
		}
		if yyb31 {
			break
		}
		if yyj31 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj31-1, "")
	}
	r.ReadArrayEnd()
}

func (x *FileBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep35 := !z.EncBinary()
		yy2arr35 := z.EncBasicHandle().StructToArray
		var yyfirst35 bool
		var yyq35 [0]bool
		_, _, _, _ = yysep35, yyfirst35, yyq35, yy2arr35
		const yyr35 bool = false
		if yyr35 || yy2arr35 {
			r.EncodeArrayStart(0)
		} else {
			var yynn35 int = 0
			for _, b := range yyq35 {
				if b {
					yynn35++
				}
			}
			r.EncodeMapStart(yynn35)
		}
		if yysep35 {
			if yyr35 || yy2arr35 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *FileBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl36 := r.ReadMapStart()
		if yyl36 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl36, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl36 := r.ReadArrayStart()
		if yyl36 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl36, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *FileBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys37Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys37Slc
	var yyhl37 bool = l >= 0
	for yyj37 := 0; ; yyj37++ {
		if yyhl37 {
			if yyj37 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj37 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys37Slc = r.DecodeBytes(yys37Slc, true, true)
		yys37 := string(yys37Slc)
		if !yyhl37 {
			r.ReadMapKVSeparator()
		}
		switch yys37 {
		default:
			z.DecStructFieldNotFound(-1, yys37)
		} // end switch yys37
	} // end for yyj37
	if !yyhl37 {
		r.ReadMapEnd()
	}
}

func (x *FileBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		if yyj38 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EntryHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep39 := !z.EncBinary()
		yy2arr39 := z.EncBasicHandle().StructToArray
		var yyfirst39 bool
		var yyq39 [3]bool
		_, _, _, _ = yysep39, yyfirst39, yyq39, yy2arr39
		const yyr39 bool = false
		if yyr39 || yy2arr39 {
			r.EncodeArrayStart(3)
		} else {
			var yynn39 int = 3
			for _, b := range yyq39 {
				if b {
					yynn39++
				}
			}
			r.EncodeMapStart(yynn39)
		}
		if yyr39 || yy2arr39 {
			r.EncodeUint(uint64(x.Cat))
		} else {
			yyfirst39 = true
			r.EncodeString(codecSelferC_UTF83471, string("Cat"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Cat))
		}
		if yyr39 || yy2arr39 {
			if yysep39 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeUint(uint64(x.Page))
		} else {
			if yyfirst39 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst39 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Page"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Page))
		}
		if yyr39 || yy2arr39 {
			if yysep39 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeUint(uint64(x.Len))
		} else {
			if yyfirst39 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst39 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Len"))
			if yysep39 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeUint(uint64(x.Len))
		}
		if yysep39 {
			if yyr39 || yy2arr39 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *EntryHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl43 := r.ReadMapStart()
		if yyl43 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl43, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl43 := r.ReadArrayStart()
		if yyl43 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl43, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *EntryHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys44Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys44Slc
	var yyhl44 bool = l >= 0
	for yyj44 := 0; ; yyj44++ {
		if yyhl44 {
			if yyj44 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj44 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys44Slc = r.DecodeBytes(yys44Slc, true, true)
		yys44 := string(yys44Slc)
		if !yyhl44 {
			r.ReadMapKVSeparator()
		}
		switch yys44 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = uint64(r.DecodeUint(64))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = uint8(r.DecodeUint(8))
			}
		case "Len":
			if r.TryDecodeAsNil() {
				x.Len = 0
			} else {
				x.Len = uint32(r.DecodeUint(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys44)
		} // end switch yys44
	} // end for yyj44
	if !yyhl44 {
		r.ReadMapEnd()
	}
}

func (x *EntryHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj48 int
	var yyb48 bool
	var yyhl48 bool = l >= 0
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = uint64(r.DecodeUint(64))
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = uint8(r.DecodeUint(8))
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Len = 0
	} else {
		x.Len = uint32(r.DecodeUint(32))
	}
	for {
		yyj48++
		if yyhl48 {
			yyb48 = yyj48 > l
		} else {
			yyb48 = r.CheckBreak()
		}
		if yyb48 {
			break
		}
		if yyj48 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj48-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Mysql) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep52 := !z.EncBinary()
		yy2arr52 := z.EncBasicHandle().StructToArray
		var yyfirst52 bool
		var yyq52 [0]bool
		_, _, _, _ = yysep52, yyfirst52, yyq52, yy2arr52
		const yyr52 bool = false
		if yyr52 || yy2arr52 {
			r.EncodeArrayStart(0)
		} else {
			var yynn52 int = 0
			for _, b := range yyq52 {
				if b {
					yynn52++
				}
			}
			r.EncodeMapStart(yynn52)
		}
		if yysep52 {
			if yyr52 || yy2arr52 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Mysql) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl53 := r.ReadMapStart()
		if yyl53 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl53, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl53 := r.ReadArrayStart()
		if yyl53 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl53, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Mysql) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj54 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		if !yyhl54 {
			r.ReadMapKVSeparator()
		}
		switch yys54 {
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	if !yyhl54 {
		r.ReadMapEnd()
	}
}

func (x *Mysql) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		if yyj55 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	r.ReadArrayEnd()
}

func (x *TraceSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep56 := !z.EncBinary()
		yy2arr56 := z.EncBasicHandle().StructToArray
		var yyfirst56 bool
		var yyq56 [0]bool
		_, _, _, _ = yysep56, yyfirst56, yyq56, yy2arr56
		const yyr56 bool = false
		if yyr56 || yy2arr56 {
			r.EncodeArrayStart(0)
		} else {
			var yynn56 int = 0
			for _, b := range yyq56 {
				if b {
					yynn56++
				}
			}
			r.EncodeMapStart(yynn56)
		}
		if yysep56 {
			if yyr56 || yy2arr56 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *TraceSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl57 := r.ReadMapStart()
		if yyl57 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl57, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl57 := r.ReadArrayStart()
		if yyl57 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl57, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *TraceSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys58Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys58Slc
	var yyhl58 bool = l >= 0
	for yyj58 := 0; ; yyj58++ {
		if yyhl58 {
			if yyj58 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj58 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys58Slc = r.DecodeBytes(yys58Slc, true, true)
		yys58 := string(yys58Slc)
		if !yyhl58 {
			r.ReadMapKVSeparator()
		}
		switch yys58 {
		default:
			z.DecStructFieldNotFound(-1, yys58)
		} // end switch yys58
	} // end for yyj58
	if !yyhl58 {
		r.ReadMapEnd()
	}
}

func (x *TraceSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj59 int
	var yyb59 bool
	var yyhl59 bool = l >= 0
	for {
		yyj59++
		if yyhl59 {
			yyb59 = yyj59 > l
		} else {
			yyb59 = r.CheckBreak()
		}
		if yyb59 {
			break
		}
		if yyj59 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj59-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Trace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep60 := !z.EncBinary()
		yy2arr60 := z.EncBasicHandle().StructToArray
		var yyfirst60 bool
		var yyq60 [0]bool
		_, _, _, _ = yysep60, yyfirst60, yyq60, yy2arr60
		const yyr60 bool = false
		if yyr60 || yy2arr60 {
			r.EncodeArrayStart(0)
		} else {
			var yynn60 int = 0
			for _, b := range yyq60 {
				if b {
					yynn60++
				}
			}
			r.EncodeMapStart(yynn60)
		}
		if yysep60 {
			if yyr60 || yy2arr60 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Trace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl61 := r.ReadMapStart()
		if yyl61 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl61, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl61 := r.ReadArrayStart()
		if yyl61 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl61, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Trace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys62Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys62Slc
	var yyhl62 bool = l >= 0
	for yyj62 := 0; ; yyj62++ {
		if yyhl62 {
			if yyj62 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj62 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys62Slc = r.DecodeBytes(yys62Slc, true, true)
		yys62 := string(yys62Slc)
		if !yyhl62 {
			r.ReadMapKVSeparator()
		}
		switch yys62 {
		default:
			z.DecStructFieldNotFound(-1, yys62)
		} // end switch yys62
	} // end for yyj62
	if !yyhl62 {
		r.ReadMapEnd()
	}
}

func (x *Trace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		if yyj63 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Entry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep64 := !z.EncBinary()
		yy2arr64 := z.EncBasicHandle().StructToArray
		var yyfirst64 bool
		var yyq64 [1]bool
		_, _, _, _ = yysep64, yyfirst64, yyq64, yy2arr64
		const yyr64 bool = false
		if yyr64 || yy2arr64 {
			r.EncodeArrayStart(1)
		} else {
			var yynn64 int = 1
			for _, b := range yyq64 {
				if b {
					yynn64++
				}
			}
			r.EncodeMapStart(yynn64)
		}
		if yyr64 || yy2arr64 {
			r.EncodeString(codecSelferC_UTF83471, string(x.Message))
		} else {
			yyfirst64 = true
			r.EncodeString(codecSelferC_UTF83471, string("Message"))
			if yysep64 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Message))
		}
		if yysep64 {
			if yyr64 || yy2arr64 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Entry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl66 := r.ReadMapStart()
		if yyl66 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl66, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl66 := r.ReadArrayStart()
		if yyl66 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl66, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Entry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys67Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys67Slc
	var yyhl67 bool = l >= 0
	for yyj67 := 0; ; yyj67++ {
		if yyhl67 {
			if yyj67 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj67 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys67Slc = r.DecodeBytes(yys67Slc, true, true)
		yys67 := string(yys67Slc)
		if !yyhl67 {
			r.ReadMapKVSeparator()
		}
		switch yys67 {
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys67)
		} // end switch yys67
	} // end for yyj67
	if !yyhl67 {
		r.ReadMapEnd()
	}
}

func (x *Entry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj69 int
	var yyb69 bool
	var yyhl69 bool = l >= 0
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj69++
		if yyhl69 {
			yyb69 = yyj69 > l
		} else {
			yyb69 = r.CheckBreak()
		}
		if yyb69 {
			break
		}
		if yyj69 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj69-1, "")
	}
	r.ReadArrayEnd()
}

func (x Traces) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encTraces(Traces(x), e)
	}
}

func (x *Traces) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decTraces((*Traces)(x), d)
}

func (x *sliceSorter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep71 := !z.EncBinary()
		yy2arr71 := z.EncBasicHandle().StructToArray
		var yyfirst71 bool
		var yyq71 [0]bool
		_, _, _, _ = yysep71, yyfirst71, yyq71, yy2arr71
		const yyr71 bool = false
		if yyr71 || yy2arr71 {
			r.EncodeArrayStart(0)
		} else {
			var yynn71 int = 0
			for _, b := range yyq71 {
				if b {
					yynn71++
				}
			}
			r.EncodeMapStart(yynn71)
		}
		if yysep71 {
			if yyr71 || yy2arr71 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *sliceSorter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl72 := r.ReadMapStart()
		if yyl72 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl72, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl72 := r.ReadArrayStart()
		if yyl72 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl72, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *sliceSorter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys73Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys73Slc
	var yyhl73 bool = l >= 0
	for yyj73 := 0; ; yyj73++ {
		if yyhl73 {
			if yyj73 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj73 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys73Slc = r.DecodeBytes(yys73Slc, true, true)
		yys73 := string(yys73Slc)
		if !yyhl73 {
			r.ReadMapKVSeparator()
		}
		switch yys73 {
		default:
			z.DecStructFieldNotFound(-1, yys73)
		} // end switch yys73
	} // end for yyj73
	if !yyhl73 {
		r.ReadMapEnd()
	}
}

func (x *sliceSorter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		if yyj74 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Item) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep75 := !z.EncBinary()
		yy2arr75 := z.EncBasicHandle().StructToArray
		var yyfirst75 bool
		var yyq75 [19]bool
		_, _, _, _ = yysep75, yyfirst75, yyq75, yy2arr75
		const yyr75 bool = false
		if yyr75 || yy2arr75 {
			r.EncodeArrayStart(19)
		} else {
			var yynn75 int = 19
			for _, b := range yyq75 {
				if b {
					yynn75++
				}
			}
			r.EncodeMapStart(yynn75)
		}
		if yyr75 || yy2arr75 {
			if x.Sources == nil {
				r.EncodeNil()
			} else {
				h.encSliceSource([]Source(x.Sources), e)
			}
		} else {
			yyfirst75 = true
			r.EncodeString(codecSelferC_UTF83471, string("Sources"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			if x.Sources == nil {
				r.EncodeNil()
			} else {
				h.encSliceSource([]Source(x.Sources), e)
			}
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Nid))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Nid"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Nid))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Category))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Category"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Category))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Pid))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Pid"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Pid))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Title))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Title"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Title))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Raw_title))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Raw_title"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Raw_title))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Pic_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Pic_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Pic_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Detail_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Detail_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Detail_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_price))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("View_price"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_price))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_fee))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("View_fee"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_fee))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Item_loc))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Item_loc"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Item_loc))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Reserve_price))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Reserve_price"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Reserve_price))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_sales))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("View_sales"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.View_sales))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Comment_count))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Comment_count"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Comment_count))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.User_id))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("User_id"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.User_id))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Nick))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Nick"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Nick))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Shopcard)
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Shopcard"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Shopcard)
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Comment_url))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Comment_url"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Comment_url))
		}
		if yyr75 || yy2arr75 {
			if yysep75 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.ShopLink))
		} else {
			if yyfirst75 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst75 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("ShopLink"))
			if yysep75 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.ShopLink))
		}
		if yysep75 {
			if yyr75 || yy2arr75 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Item) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl95 := r.ReadMapStart()
		if yyl95 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl95, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl95 := r.ReadArrayStart()
		if yyl95 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl95, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Item) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys96Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys96Slc
	var yyhl96 bool = l >= 0
	for yyj96 := 0; ; yyj96++ {
		if yyhl96 {
			if yyj96 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj96 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys96Slc = r.DecodeBytes(yys96Slc, true, true)
		yys96 := string(yys96Slc)
		if !yyhl96 {
			r.ReadMapKVSeparator()
		}
		switch yys96 {
		case "Sources":
			if r.TryDecodeAsNil() {
				x.Sources = nil
			} else {
				yyv97 := &x.Sources
				h.decSliceSource((*[]Source)(yyv97), d)
			}
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = ""
			} else {
				x.Nid = string(r.DecodeString())
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = ""
			} else {
				x.Category = string(r.DecodeString())
			}
		case "Pid":
			if r.TryDecodeAsNil() {
				x.Pid = ""
			} else {
				x.Pid = string(r.DecodeString())
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Raw_title":
			if r.TryDecodeAsNil() {
				x.Raw_title = ""
			} else {
				x.Raw_title = string(r.DecodeString())
			}
		case "Pic_url":
			if r.TryDecodeAsNil() {
				x.Pic_url = ""
			} else {
				x.Pic_url = string(r.DecodeString())
			}
		case "Detail_url":
			if r.TryDecodeAsNil() {
				x.Detail_url = ""
			} else {
				x.Detail_url = string(r.DecodeString())
			}
		case "View_price":
			if r.TryDecodeAsNil() {
				x.View_price = ""
			} else {
				x.View_price = string(r.DecodeString())
			}
		case "View_fee":
			if r.TryDecodeAsNil() {
				x.View_fee = ""
			} else {
				x.View_fee = string(r.DecodeString())
			}
		case "Item_loc":
			if r.TryDecodeAsNil() {
				x.Item_loc = ""
			} else {
				x.Item_loc = string(r.DecodeString())
			}
		case "Reserve_price":
			if r.TryDecodeAsNil() {
				x.Reserve_price = ""
			} else {
				x.Reserve_price = string(r.DecodeString())
			}
		case "View_sales":
			if r.TryDecodeAsNil() {
				x.View_sales = ""
			} else {
				x.View_sales = string(r.DecodeString())
			}
		case "Comment_count":
			if r.TryDecodeAsNil() {
				x.Comment_count = ""
			} else {
				x.Comment_count = string(r.DecodeString())
			}
		case "User_id":
			if r.TryDecodeAsNil() {
				x.User_id = ""
			} else {
				x.User_id = string(r.DecodeString())
			}
		case "Nick":
			if r.TryDecodeAsNil() {
				x.Nick = ""
			} else {
				x.Nick = string(r.DecodeString())
			}
		case "Shopcard":
			if r.TryDecodeAsNil() {
				x.Shopcard = struct {
					LevelClasses    []struct{ LevelClass string }
					IsTmall         bool
					Delivery        []int
					Description     []int
					Service         []int
					EncryptedUserId string
					SellerCredit    int
					TotalRate       int
				}{}
			} else {
				yyv113 := &x.Shopcard
				z.DecFallback(yyv113, false)
			}
		case "Comment_url":
			if r.TryDecodeAsNil() {
				x.Comment_url = ""
			} else {
				x.Comment_url = string(r.DecodeString())
			}
		case "ShopLink":
			if r.TryDecodeAsNil() {
				x.ShopLink = ""
			} else {
				x.ShopLink = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys96)
		} // end switch yys96
	} // end for yyj96
	if !yyhl96 {
		r.ReadMapEnd()
	}
}

func (x *Item) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Sources = nil
	} else {
		yyv117 := &x.Sources
		h.decSliceSource((*[]Source)(yyv117), d)
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nid = ""
	} else {
		x.Nid = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = ""
	} else {
		x.Category = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pid = ""
	} else {
		x.Pid = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Raw_title = ""
	} else {
		x.Raw_title = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pic_url = ""
	} else {
		x.Pic_url = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Detail_url = ""
	} else {
		x.Detail_url = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_price = ""
	} else {
		x.View_price = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_fee = ""
	} else {
		x.View_fee = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Item_loc = ""
	} else {
		x.Item_loc = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reserve_price = ""
	} else {
		x.Reserve_price = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_sales = ""
	} else {
		x.View_sales = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_count = ""
	} else {
		x.Comment_count = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User_id = ""
	} else {
		x.User_id = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nick = ""
	} else {
		x.Nick = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Shopcard = struct {
			LevelClasses    []struct{ LevelClass string }
			IsTmall         bool
			Delivery        []int
			Description     []int
			Service         []int
			EncryptedUserId string
			SellerCredit    int
			TotalRate       int
		}{}
	} else {
		yyv133 := &x.Shopcard
		z.DecFallback(yyv133, false)
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_url = ""
	} else {
		x.Comment_url = string(r.DecodeString())
	}
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ShopLink = ""
	} else {
		x.ShopLink = string(r.DecodeString())
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		if yyj116 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Raw) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep136 := !z.EncBinary()
		yy2arr136 := z.EncBasicHandle().StructToArray
		var yyfirst136 bool
		var yyq136 [4]bool
		_, _, _, _ = yysep136, yyfirst136, yyq136, yy2arr136
		const yyr136 bool = false
		if yyr136 || yy2arr136 {
			r.EncodeArrayStart(4)
		} else {
			var yynn136 int = 4
			for _, b := range yyq136 {
				if b {
					yynn136++
				}
			}
			r.EncodeMapStart(yynn136)
		}
		if yyr136 || yy2arr136 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst136 = true
			r.EncodeString(codecSelferC_UTF83471, string("Cat"))
			if yysep136 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr136 || yy2arr136 {
			if yysep136 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst136 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst136 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Page"))
			if yysep136 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr136 || yy2arr136 {
			if yysep136 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceItem([]Item(x.Items), e)
			}
		} else {
			if yyfirst136 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst136 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Items"))
			if yysep136 {
				r.EncodeMapKVSeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceItem([]Item(x.Items), e)
			}
		}
		if yyr136 || yy2arr136 {
			if yysep136 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW3471, []byte(x.Html))
			}
		} else {
			if yyfirst136 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst136 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Html"))
			if yysep136 {
				r.EncodeMapKVSeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW3471, []byte(x.Html))
			}
		}
		if yysep136 {
			if yyr136 || yy2arr136 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Raw) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl141 := r.ReadMapStart()
		if yyl141 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl141, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl141 := r.ReadArrayStart()
		if yyl141 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl141, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Raw) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys142Slc
	var yyhl142 bool = l >= 0
	for yyj142 := 0; ; yyj142++ {
		if yyhl142 {
			if yyj142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj142 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys142Slc = r.DecodeBytes(yys142Slc, true, true)
		yys142 := string(yys142Slc)
		if !yyhl142 {
			r.ReadMapKVSeparator()
		}
		switch yys142 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv145 := &x.Items
				h.decSliceItem((*[]Item)(yyv145), d)
			}
		case "Html":
			if r.TryDecodeAsNil() {
				x.Html = nil
			} else {
				yyv146 := &x.Html
				*yyv146 = r.DecodeBytes(*(*[]byte)(yyv146), false, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys142)
		} // end switch yys142
	} // end for yyj142
	if !yyhl142 {
		r.ReadMapEnd()
	}
}

func (x *Raw) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj147 int
	var yyb147 bool
	var yyhl147 bool = l >= 0
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv150 := &x.Items
		h.decSliceItem((*[]Item)(yyv150), d)
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Html = nil
	} else {
		yyv151 := &x.Html
		*yyv151 = r.DecodeBytes(*(*[]byte)(yyv151), false, false)
	}
	for {
		yyj147++
		if yyhl147 {
			yyb147 = yyj147 > l
		} else {
			yyb147 = r.CheckBreak()
		}
		if yyb147 {
			break
		}
		if yyj147 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj147-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Source) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep152 := !z.EncBinary()
		yy2arr152 := z.EncBasicHandle().StructToArray
		var yyfirst152 bool
		var yyq152 [2]bool
		_, _, _, _ = yysep152, yyfirst152, yyq152, yy2arr152
		const yyr152 bool = false
		if yyr152 || yy2arr152 {
			r.EncodeArrayStart(2)
		} else {
			var yynn152 int = 2
			for _, b := range yyq152 {
				if b {
					yynn152++
				}
			}
			r.EncodeMapStart(yynn152)
		}
		if yyr152 || yy2arr152 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst152 = true
			r.EncodeString(codecSelferC_UTF83471, string("Cat"))
			if yysep152 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr152 || yy2arr152 {
			if yysep152 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst152 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst152 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Page"))
			if yysep152 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yysep152 {
			if yyr152 || yy2arr152 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Source) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl155 := r.ReadMapStart()
		if yyl155 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl155, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl155 := r.ReadArrayStart()
		if yyl155 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl155, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Source) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys156Slc
	var yyhl156 bool = l >= 0
	for yyj156 := 0; ; yyj156++ {
		if yyhl156 {
			if yyj156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj156 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys156Slc = r.DecodeBytes(yys156Slc, true, true)
		yys156 := string(yys156Slc)
		if !yyhl156 {
			r.ReadMapKVSeparator()
		}
		switch yys156 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize3471))
			}
		default:
			z.DecStructFieldNotFound(-1, yys156)
		} // end switch yys156
	} // end for yyj156
	if !yyhl156 {
		r.ReadMapEnd()
	}
}

func (x *Source) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize3471))
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		if yyj159 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep162 := !z.EncBinary()
		yy2arr162 := z.EncBasicHandle().StructToArray
		var yyfirst162 bool
		var yyq162 [3]bool
		_, _, _, _ = yysep162, yyfirst162, yyq162, yy2arr162
		const yyr162 bool = false
		if yyr162 || yy2arr162 {
			r.EncodeArrayStart(3)
		} else {
			var yynn162 int = 3
			for _, b := range yyq162 {
				if b {
					yynn162++
				}
			}
			r.EncodeMapStart(yynn162)
		}
		if yyr162 || yy2arr162 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst162 = true
			r.EncodeString(codecSelferC_UTF83471, string("Cat"))
			if yysep162 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr162 || yy2arr162 {
			if yysep162 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst162 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst162 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Page"))
			if yysep162 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr162 || yy2arr162 {
			if yysep162 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Done))
		} else {
			if yyfirst162 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst162 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Done"))
			if yysep162 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Done))
		}
		if yysep162 {
			if yyr162 || yy2arr162 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl166 := r.ReadMapStart()
		if yyl166 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl166, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl166 := r.ReadArrayStart()
		if yyl166 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl166, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys167Slc
	var yyhl167 bool = l >= 0
	for yyj167 := 0; ; yyj167++ {
		if yyhl167 {
			if yyj167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj167 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys167Slc = r.DecodeBytes(yys167Slc, true, true)
		yys167 := string(yys167Slc)
		if !yyhl167 {
			r.ReadMapKVSeparator()
		}
		switch yys167 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Done":
			if r.TryDecodeAsNil() {
				x.Done = false
			} else {
				x.Done = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys167)
		} // end switch yys167
	} // end for yyj167
	if !yyhl167 {
		r.ReadMapEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj171 int
	var yyb171 bool
	var yyhl171 bool = l >= 0
	yyj171++
	if yyhl171 {
		yyb171 = yyj171 > l
	} else {
		yyb171 = r.CheckBreak()
	}
	if yyb171 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj171++
	if yyhl171 {
		yyb171 = yyj171 > l
	} else {
		yyb171 = r.CheckBreak()
	}
	if yyb171 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj171++
	if yyhl171 {
		yyb171 = yyj171 > l
	} else {
		yyb171 = r.CheckBreak()
	}
	if yyb171 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Done = false
	} else {
		x.Done = bool(r.DecodeBool())
	}
	for {
		yyj171++
		if yyhl171 {
			yyb171 = yyj171 > l
		} else {
			yyb171 = r.CheckBreak()
		}
		if yyb171 {
			break
		}
		if yyj171 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj171-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Cat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep175 := !z.EncBinary()
		yy2arr175 := z.EncBasicHandle().StructToArray
		var yyfirst175 bool
		var yyq175 [4]bool
		_, _, _, _ = yysep175, yyfirst175, yyq175, yy2arr175
		const yyr175 bool = false
		if yyr175 || yy2arr175 {
			r.EncodeArrayStart(4)
		} else {
			var yynn175 int = 4
			for _, b := range yyq175 {
				if b {
					yynn175++
				}
			}
			r.EncodeMapStart(yynn175)
		}
		if yyr175 || yy2arr175 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst175 = true
			r.EncodeString(codecSelferC_UTF83471, string("Cat"))
			if yysep175 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr175 || yy2arr175 {
			if yysep175 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Name))
		} else {
			if yyfirst175 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst175 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Name"))
			if yysep175 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.Name))
		}
		if yyr175 || yy2arr175 {
			if yysep175 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		} else {
			if yyfirst175 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst175 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Relatives"))
			if yysep175 {
				r.EncodeMapKVSeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		}
		if yyr175 || yy2arr175 {
			if yysep175 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Parent))
		} else {
			if yyfirst175 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst175 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Parent"))
			if yysep175 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Parent))
		}
		if yysep175 {
			if yyr175 || yy2arr175 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Cat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl180 := r.ReadMapStart()
		if yyl180 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl180, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl180 := r.ReadArrayStart()
		if yyl180 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl180, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *Cat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys181Slc
	var yyhl181 bool = l >= 0
	for yyj181 := 0; ; yyj181++ {
		if yyhl181 {
			if yyj181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj181 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys181Slc = r.DecodeBytes(yys181Slc, true, true)
		yys181 := string(yys181Slc)
		if !yyhl181 {
			r.ReadMapKVSeparator()
		}
		switch yys181 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Relatives":
			if r.TryDecodeAsNil() {
				x.Relatives = nil
			} else {
				yyv184 := &x.Relatives
				z.F.DecSliceIntX(yyv184, false, d)
			}
		case "Parent":
			if r.TryDecodeAsNil() {
				x.Parent = 0
			} else {
				x.Parent = int(r.DecodeInt(codecSelferBitsize3471))
			}
		default:
			z.DecStructFieldNotFound(-1, yys181)
		} // end switch yys181
	} // end for yyj181
	if !yyhl181 {
		r.ReadMapEnd()
	}
}

func (x *Cat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj186 int
	var yyb186 bool
	var yyhl186 bool = l >= 0
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize3471))
	}
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Relatives = nil
	} else {
		yyv189 := &x.Relatives
		z.F.DecSliceIntX(yyv189, false, d)
	}
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Parent = 0
	} else {
		x.Parent = int(r.DecodeInt(codecSelferBitsize3471))
	}
	for {
		yyj186++
		if yyhl186 {
			yyb186 = yyj186 > l
		} else {
			yyb186 = r.CheckBreak()
		}
		if yyb186 {
			break
		}
		if yyj186 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj186-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CatInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep191 := !z.EncBinary()
		yy2arr191 := z.EncBasicHandle().StructToArray
		var yyfirst191 bool
		var yyq191 [1]bool
		_, _, _, _ = yysep191, yyfirst191, yyq191, yy2arr191
		const yyr191 bool = false
		if yyr191 || yy2arr191 {
			r.EncodeArrayStart(1)
		} else {
			var yynn191 int = 1
			for _, b := range yyq191 {
				if b {
					yynn191++
				}
			}
			r.EncodeMapStart(yynn191)
		}
		if yyr191 || yy2arr191 {
			z.EncFallback(x.LastChecked)
		} else {
			yyfirst191 = true
			r.EncodeString(codecSelferC_UTF83471, string("LastChecked"))
			if yysep191 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.LastChecked)
		}
		if yysep191 {
			if yyr191 || yy2arr191 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *CatInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl193 := r.ReadMapStart()
		if yyl193 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl193, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl193 := r.ReadArrayStart()
		if yyl193 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl193, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *CatInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj194 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		if !yyhl194 {
			r.ReadMapKVSeparator()
		}
		switch yys194 {
		case "LastChecked":
			if r.TryDecodeAsNil() {
				x.LastChecked = time.Time{}
			} else {
				yyv195 := &x.LastChecked
				z.DecFallback(yyv195, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	if !yyhl194 {
		r.ReadMapEnd()
	}
}

func (x *CatInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj196 int
	var yyb196 bool
	var yyhl196 bool = l >= 0
	yyj196++
	if yyhl196 {
		yyb196 = yyj196 > l
	} else {
		yyb196 = r.CheckBreak()
	}
	if yyb196 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastChecked = time.Time{}
	} else {
		yyv197 := &x.LastChecked
		z.DecFallback(yyv197, false)
	}
	for {
		yyj196++
		if yyhl196 {
			yyb196 = yyj196 > l
		} else {
			yyb196 = r.CheckBreak()
		}
		if yyb196 {
			break
		}
		if yyj196 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj196-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NavData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep198 := !z.EncBinary()
		yy2arr198 := z.EncBasicHandle().StructToArray
		var yyfirst198 bool
		var yyq198 [3]bool
		_, _, _, _ = yysep198, yyfirst198, yyq198, yy2arr198
		const yyr198 bool = false
		if yyr198 || yy2arr198 {
			r.EncodeArrayStart(3)
		} else {
			var yynn198 int = 3
			for _, b := range yyq198 {
				if b {
					yynn198++
				}
			}
			r.EncodeMapStart(yynn198)
		}
		if yyr198 || yy2arr198 {
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		} else {
			yyfirst198 = true
			r.EncodeString(codecSelferC_UTF83471, string("Common"))
			if yysep198 {
				r.EncodeMapKVSeparator()
			}
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		}
		if yyr198 || yy2arr198 {
			if yysep198 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		} else {
			if yyfirst198 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst198 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Breadcrumbs"))
			if yysep198 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		}
		if yyr198 || yy2arr198 {
			if yysep198 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		} else {
			if yyfirst198 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst198 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Hidenav"))
			if yysep198 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		}
		if yysep198 {
			if yyr198 || yy2arr198 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *NavData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl202 := r.ReadMapStart()
		if yyl202 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl202, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl202 := r.ReadArrayStart()
		if yyl202 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl202, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *NavData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys203Slc
	var yyhl203 bool = l >= 0
	for yyj203 := 0; ; yyj203++ {
		if yyhl203 {
			if yyj203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj203 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys203Slc = r.DecodeBytes(yys203Slc, true, true)
		yys203 := string(yys203Slc)
		if !yyhl203 {
			r.ReadMapKVSeparator()
		}
		switch yys203 {
		case "Common":
			if r.TryDecodeAsNil() {
				x.Common = nil
			} else {
				yyv204 := &x.Common
				h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				})(yyv204), d)
			}
		case "Breadcrumbs":
			if r.TryDecodeAsNil() {
				x.Breadcrumbs = struct {
					BaobeiTotalHit string
					Catpath        []struct {
						Catid string
						Name  string
					}
				}{}
			} else {
				yyv205 := &x.Breadcrumbs
				z.DecFallback(yyv205, false)
			}
		case "Hidenav":
			if r.TryDecodeAsNil() {
				x.Hidenav = false
			} else {
				x.Hidenav = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys203)
		} // end switch yys203
	} // end for yyj203
	if !yyhl203 {
		r.ReadMapEnd()
	}
}

func (x *NavData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Common = nil
	} else {
		yyv208 := &x.Common
		h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
			Text string
			Sub  []struct {
				Text  string
				Key   string
				Value string
			}
		})(yyv208), d)
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Breadcrumbs = struct {
			BaobeiTotalHit string
			Catpath        []struct {
				Catid string
				Name  string
			}
		}{}
	} else {
		yyv209 := &x.Breadcrumbs
		z.DecFallback(yyv209, false)
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hidenav = false
	} else {
		x.Hidenav = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		if yyj207 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadArrayEnd()
}

func (x Jobs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encJobs(Jobs(x), e)
	}
}

func (x *Jobs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decJobs((*Jobs)(x), d)
}

func (x StrSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encStrSet(StrSet(x), e)
	}
}

func (x *StrSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decStrSet((*StrSet)(x), d)
}

func (x *TraceInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep211 := !z.EncBinary()
		yy2arr211 := z.EncBasicHandle().StructToArray
		var yyfirst211 bool
		var yyq211 [2]bool
		_, _, _, _ = yysep211, yyfirst211, yyq211, yy2arr211
		const yyr211 bool = false
		if yyr211 || yy2arr211 {
			r.EncodeArrayStart(2)
		} else {
			var yynn211 int = 2
			for _, b := range yyq211 {
				if b {
					yynn211++
				}
			}
			r.EncodeMapStart(yynn211)
		}
		if yyr211 || yy2arr211 {
			r.EncodeString(codecSelferC_UTF83471, string(x.What))
		} else {
			yyfirst211 = true
			r.EncodeString(codecSelferC_UTF83471, string("What"))
			if yysep211 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(x.What))
		}
		if yyr211 || yy2arr211 {
			if yysep211 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Entries == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoEntry([]*Entry(x.Entries), e)
			}
		} else {
			if yyfirst211 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst211 = true
			}
			r.EncodeString(codecSelferC_UTF83471, string("Entries"))
			if yysep211 {
				r.EncodeMapKVSeparator()
			}
			if x.Entries == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoEntry([]*Entry(x.Entries), e)
			}
		}
		if yysep211 {
			if yyr211 || yy2arr211 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *TraceInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap3471) {
		yyl214 := r.ReadMapStart()
		if yyl214 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl214, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray3471) {
		yyl214 := r.ReadArrayStart()
		if yyl214 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl214, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr3471)
	}
}

func (x *TraceInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys215Slc
	var yyhl215 bool = l >= 0
	for yyj215 := 0; ; yyj215++ {
		if yyhl215 {
			if yyj215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj215 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys215Slc = r.DecodeBytes(yys215Slc, true, true)
		yys215 := string(yys215Slc)
		if !yyhl215 {
			r.ReadMapKVSeparator()
		}
		switch yys215 {
		case "What":
			if r.TryDecodeAsNil() {
				x.What = ""
			} else {
				x.What = string(r.DecodeString())
			}
		case "Entries":
			if r.TryDecodeAsNil() {
				x.Entries = nil
			} else {
				yyv217 := &x.Entries
				h.decSlicePtrtoEntry((*[]*Entry)(yyv217), d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys215)
		} // end switch yys215
	} // end for yyj215
	if !yyhl215 {
		r.ReadMapEnd()
	}
}

func (x *TraceInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj218 int
	var yyb218 bool
	var yyhl218 bool = l >= 0
	yyj218++
	if yyhl218 {
		yyb218 = yyj218 > l
	} else {
		yyb218 = r.CheckBreak()
	}
	if yyb218 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.What = ""
	} else {
		x.What = string(r.DecodeString())
	}
	yyj218++
	if yyhl218 {
		yyb218 = yyj218 > l
	} else {
		yyb218 = r.CheckBreak()
	}
	if yyb218 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Entries = nil
	} else {
		yyv220 := &x.Entries
		h.decSlicePtrtoEntry((*[]*Entry)(yyv220), d)
	}
	for {
		yyj218++
		if yyhl218 {
			yyb218 = yyj218 > l
		} else {
			yyb218 = r.CheckBreak()
		}
		if yyb218 {
			break
		}
		if yyj218 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj218-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer3471) encJobs(v Jobs, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys221 := !z.EncBinary()
	if yys221 {
		for yyi221, yyv221 := range v {
			if yyi221 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv221.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv221 := range v {
			yyv221.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer3471) decJobs(v *Jobs, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv222 := *v
	yyh222, yyl222 := z.DecSliceHelperStart()

	var yyc222 bool
	if yyv222 == nil {
		if yyl222 <= 0 {
			yyv222 = make(Jobs, 0)
		} else {
			yyv222 = make(Jobs, yyl222)
		}
		yyc222 = true
	}

	if yyl222 == 0 {
		if len(yyv222) != 0 {
			yyv222 = yyv222[:0]
			yyc222 = true
		}
	} else if yyl222 > 0 {

		yyn222 := yyl222
		if yyl222 > cap(yyv222) {
			yyv222 = make([]Job, yyl222, yyl222)
			yyc222 = true

		} else if yyl222 != len(yyv222) {
			yyv222 = yyv222[:yyl222]
			yyc222 = true
		}
		yyj222 := 0
		for ; yyj222 < yyn222; yyj222++ {
			if r.TryDecodeAsNil() {
				yyv222[yyj222] = Job{}
			} else {
				yyv223 := &yyv222[yyj222]
				yyv223.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj222 := 0; !r.CheckBreak(); yyj222++ {
			if yyj222 >= len(yyv222) {
				yyv222 = append(yyv222, Job{}) // var yyz222 Job
				yyc222 = true
			}
			if yyj222 > 0 {
				yyh222.Sep(yyj222)
			}

			if yyj222 < len(yyv222) {
				if r.TryDecodeAsNil() {
					yyv222[yyj222] = Job{}
				} else {
					yyv224 := &yyv222[yyj222]
					yyv224.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh222.End()
	}
	if yyc222 {
		*v = yyv222
	}
}

func (x codecSelfer3471) encStrSet(v StrSet, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys225 := !z.EncBinary()
	yyj225 := 0
	if yys225 {
		for yyk225, yyv225 := range v {
			if yyj225 > 0 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(yyk225))
			r.EncodeMapKVSeparator()
			z.EncFallback(yyv225)
			yyj225++
		}
		r.EncodeMapEnd()
	} else {
		for yyk225, yyv225 := range v {
			r.EncodeString(codecSelferC_UTF83471, string(yyk225))
			z.EncFallback(yyv225)
		}
	}
}

func (x codecSelfer3471) decStrSet(v *StrSet, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv226 := *v
	yyl226 := r.ReadMapStart()
	if yyv226 == nil {
		if yyl226 > 0 {
			yyv226 = make(map[string]struct{}, yyl226)
		} else {
			yyv226 = make(map[string]struct{}) // supports indefinite-length, etc
		}
		*v = yyv226
	}
	if yyl226 > 0 {
		for yyj226 := 0; yyj226 < yyl226; yyj226++ {
			var yymk226 string
			if r.TryDecodeAsNil() {
				yymk226 = ""
			} else {
				yymk226 = string(r.DecodeString())
			}

			yymv226 := yyv226[yymk226]
			if r.TryDecodeAsNil() {
				yymv226 = struct{}{}
			} else {
				yyv228 := &yymv226
				z.DecFallback(yyv228, false)
			}

			if yyv226 != nil {
				yyv226[yymk226] = yymv226
			}
		}
	} else if yyl226 < 0 {
		for yyj226 := 0; !r.CheckBreak(); yyj226++ {
			if yyj226 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk226 string
			if r.TryDecodeAsNil() {
				yymk226 = ""
			} else {
				yymk226 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv226 := yyv226[yymk226]
			if r.TryDecodeAsNil() {
				yymv226 = struct{}{}
			} else {
				yyv230 := &yymv226
				z.DecFallback(yyv230, false)
			}

			if yyv226 != nil {
				yyv226[yymk226] = yymv226
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer3471) encSlicePtrtoEntry(v []*Entry, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys231 := !z.EncBinary()
	if yys231 {
		for yyi231, yyv231 := range v {
			if yyi231 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			if yyv231 == nil {
				r.EncodeNil()
			} else {
				yyv231.CodecEncodeSelf(e)
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv231 := range v {
			if yyv231 == nil {
				r.EncodeNil()
			} else {
				yyv231.CodecEncodeSelf(e)
			}
		}
	}
}

func (x codecSelfer3471) decSlicePtrtoEntry(v *[]*Entry, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv232 := *v
	yyh232, yyl232 := z.DecSliceHelperStart()

	var yyc232 bool
	if yyv232 == nil {
		if yyl232 <= 0 {
			yyv232 = make([]*Entry, 0)
		} else {
			yyv232 = make([]*Entry, yyl232)
		}
		yyc232 = true
	}

	if yyl232 == 0 {
		if len(yyv232) != 0 {
			yyv232 = yyv232[:0]
			yyc232 = true
		}
	} else if yyl232 > 0 {

		yyn232 := yyl232
		if yyl232 > cap(yyv232) {
			yyv232 = make([]*Entry, yyl232, yyl232)
			yyc232 = true

		} else if yyl232 != len(yyv232) {
			yyv232 = yyv232[:yyl232]
			yyc232 = true
		}
		yyj232 := 0
		for ; yyj232 < yyn232; yyj232++ {
			if r.TryDecodeAsNil() {
				if yyv232[yyj232] != nil {
					*yyv232[yyj232] = Entry{}
				}
			} else {
				if yyv232[yyj232] == nil {
					yyv232[yyj232] = new(Entry)
				}
				yyw233 := yyv232[yyj232]
				yyw233.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj232 := 0; !r.CheckBreak(); yyj232++ {
			if yyj232 >= len(yyv232) {
				yyv232 = append(yyv232, nil) // var yyz232 *Entry
				yyc232 = true
			}
			if yyj232 > 0 {
				yyh232.Sep(yyj232)
			}

			if yyj232 < len(yyv232) {
				if r.TryDecodeAsNil() {
					if yyv232[yyj232] != nil {
						*yyv232[yyj232] = Entry{}
					}
				} else {
					if yyv232[yyj232] == nil {
						yyv232[yyj232] = new(Entry)
					}
					yyw234 := yyv232[yyj232]
					yyw234.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh232.End()
	}
	if yyc232 {
		*v = yyv232
	}
}

func (x codecSelfer3471) encMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(v map[string]struct {
	Status string
	Export bool
	Data   json.RawMessage
}, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys235 := !z.EncBinary()
	yyj235 := 0
	if yys235 {
		for yyk235, yyv235 := range v {
			if yyj235 > 0 {
				r.EncodeMapEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF83471, string(yyk235))
			r.EncodeMapKVSeparator()
			z.EncFallback(yyv235)
			yyj235++
		}
		r.EncodeMapEnd()
	} else {
		for yyk235, yyv235 := range v {
			r.EncodeString(codecSelferC_UTF83471, string(yyk235))
			z.EncFallback(yyv235)
		}
	}
}

func (x codecSelfer3471) decMapstringc3RydWN0IHsgU3RhdHVzIHN0cmluZzsgRXhwb3J0IGJvb2w7IERhdGEganNvbi5SYXdNZXNzYWdlIH0(v *map[string]struct {
	Status string
	Export bool
	Data   json.RawMessage
}, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv236 := *v
	yyl236 := r.ReadMapStart()
	if yyv236 == nil {
		if yyl236 > 0 {
			yyv236 = make(map[string]struct {
				Status string
				Export bool
				Data   json.RawMessage
			}, yyl236)
		} else {
			yyv236 = make(map[string]struct {
				Status string
				Export bool
				Data   json.RawMessage
			}) // supports indefinite-length, etc
		}
		*v = yyv236
	}
	if yyl236 > 0 {
		for yyj236 := 0; yyj236 < yyl236; yyj236++ {
			var yymk236 string
			if r.TryDecodeAsNil() {
				yymk236 = ""
			} else {
				yymk236 = string(r.DecodeString())
			}

			yymv236 := yyv236[yymk236]
			if r.TryDecodeAsNil() {
				yymv236 = struct {
					Status string
					Export bool
					Data   json.RawMessage
				}{}
			} else {
				yyv238 := &yymv236
				z.DecFallback(yyv238, false)
			}

			if yyv236 != nil {
				yyv236[yymk236] = yymv236
			}
		}
	} else if yyl236 < 0 {
		for yyj236 := 0; !r.CheckBreak(); yyj236++ {
			if yyj236 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk236 string
			if r.TryDecodeAsNil() {
				yymk236 = ""
			} else {
				yymk236 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv236 := yyv236[yymk236]
			if r.TryDecodeAsNil() {
				yymv236 = struct {
					Status string
					Export bool
					Data   json.RawMessage
				}{}
			} else {
				yyv240 := &yymv236
				z.DecFallback(yyv240, false)
			}

			if yyv236 != nil {
				yyv236[yymk236] = yymv236
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer3471) encTraces(v Traces, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys241 := !z.EncBinary()
	if yys241 {
		for yyi241, yyv241 := range v {
			if yyi241 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			if yyv241 == nil {
				r.EncodeNil()
			} else {
				yyv241.CodecEncodeSelf(e)
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv241 := range v {
			if yyv241 == nil {
				r.EncodeNil()
			} else {
				yyv241.CodecEncodeSelf(e)
			}
		}
	}
}

func (x codecSelfer3471) decTraces(v *Traces, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv242 := *v
	yyh242, yyl242 := z.DecSliceHelperStart()

	var yyc242 bool
	if yyv242 == nil {
		if yyl242 <= 0 {
			yyv242 = make(Traces, 0)
		} else {
			yyv242 = make(Traces, yyl242)
		}
		yyc242 = true
	}

	if yyl242 == 0 {
		if len(yyv242) != 0 {
			yyv242 = yyv242[:0]
			yyc242 = true
		}
	} else if yyl242 > 0 {

		yyn242 := yyl242
		if yyl242 > cap(yyv242) {
			yyv242 = make([]*Trace, yyl242, yyl242)
			yyc242 = true

		} else if yyl242 != len(yyv242) {
			yyv242 = yyv242[:yyl242]
			yyc242 = true
		}
		yyj242 := 0
		for ; yyj242 < yyn242; yyj242++ {
			if r.TryDecodeAsNil() {
				if yyv242[yyj242] != nil {
					*yyv242[yyj242] = Trace{}
				}
			} else {
				if yyv242[yyj242] == nil {
					yyv242[yyj242] = new(Trace)
				}
				yyw243 := yyv242[yyj242]
				yyw243.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj242 := 0; !r.CheckBreak(); yyj242++ {
			if yyj242 >= len(yyv242) {
				yyv242 = append(yyv242, nil) // var yyz242 *Trace
				yyc242 = true
			}
			if yyj242 > 0 {
				yyh242.Sep(yyj242)
			}

			if yyj242 < len(yyv242) {
				if r.TryDecodeAsNil() {
					if yyv242[yyj242] != nil {
						*yyv242[yyj242] = Trace{}
					}
				} else {
					if yyv242[yyj242] == nil {
						yyv242[yyj242] = new(Trace)
					}
					yyw244 := yyv242[yyj242]
					yyw244.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh242.End()
	}
	if yyc242 {
		*v = yyv242
	}
}

func (x codecSelfer3471) encSliceSource(v []Source, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys245 := !z.EncBinary()
	if yys245 {
		for yyi245, yyv245 := range v {
			if yyi245 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv245.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv245 := range v {
			yyv245.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer3471) decSliceSource(v *[]Source, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv246 := *v
	yyh246, yyl246 := z.DecSliceHelperStart()

	var yyc246 bool
	if yyv246 == nil {
		if yyl246 <= 0 {
			yyv246 = make([]Source, 0)
		} else {
			yyv246 = make([]Source, yyl246)
		}
		yyc246 = true
	}

	if yyl246 == 0 {
		if len(yyv246) != 0 {
			yyv246 = yyv246[:0]
			yyc246 = true
		}
	} else if yyl246 > 0 {

		yyn246 := yyl246
		if yyl246 > cap(yyv246) {
			yyv246 = make([]Source, yyl246, yyl246)
			yyc246 = true

		} else if yyl246 != len(yyv246) {
			yyv246 = yyv246[:yyl246]
			yyc246 = true
		}
		yyj246 := 0
		for ; yyj246 < yyn246; yyj246++ {
			if r.TryDecodeAsNil() {
				yyv246[yyj246] = Source{}
			} else {
				yyv247 := &yyv246[yyj246]
				yyv247.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj246 := 0; !r.CheckBreak(); yyj246++ {
			if yyj246 >= len(yyv246) {
				yyv246 = append(yyv246, Source{}) // var yyz246 Source
				yyc246 = true
			}
			if yyj246 > 0 {
				yyh246.Sep(yyj246)
			}

			if yyj246 < len(yyv246) {
				if r.TryDecodeAsNil() {
					yyv246[yyj246] = Source{}
				} else {
					yyv248 := &yyv246[yyj246]
					yyv248.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh246.End()
	}
	if yyc246 {
		*v = yyv246
	}
}

func (x codecSelfer3471) encSliceItem(v []Item, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys249 := !z.EncBinary()
	if yys249 {
		for yyi249, yyv249 := range v {
			if yyi249 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv249.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv249 := range v {
			yyv249.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer3471) decSliceItem(v *[]Item, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv250 := *v
	yyh250, yyl250 := z.DecSliceHelperStart()

	var yyc250 bool
	if yyv250 == nil {
		if yyl250 <= 0 {
			yyv250 = make([]Item, 0)
		} else {
			yyv250 = make([]Item, yyl250)
		}
		yyc250 = true
	}

	if yyl250 == 0 {
		if len(yyv250) != 0 {
			yyv250 = yyv250[:0]
			yyc250 = true
		}
	} else if yyl250 > 0 {

		yyn250 := yyl250
		if yyl250 > cap(yyv250) {
			yyv250 = make([]Item, yyl250, yyl250)
			yyc250 = true

		} else if yyl250 != len(yyv250) {
			yyv250 = yyv250[:yyl250]
			yyc250 = true
		}
		yyj250 := 0
		for ; yyj250 < yyn250; yyj250++ {
			if r.TryDecodeAsNil() {
				yyv250[yyj250] = Item{}
			} else {
				yyv251 := &yyv250[yyj250]
				yyv251.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj250 := 0; !r.CheckBreak(); yyj250++ {
			if yyj250 >= len(yyv250) {
				yyv250 = append(yyv250, Item{}) // var yyz250 Item
				yyc250 = true
			}
			if yyj250 > 0 {
				yyh250.Sep(yyj250)
			}

			if yyj250 < len(yyv250) {
				if r.TryDecodeAsNil() {
					yyv250[yyj250] = Item{}
				} else {
					yyv252 := &yyv250[yyj250]
					yyv252.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh250.End()
	}
	if yyc250 {
		*v = yyv250
	}
}

func (x codecSelfer3471) encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v []struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, e *codec1978.Encoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys253 := !z.EncBinary()
	if yys253 {
		for yyi253, yyv253 := range v {
			if yyi253 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(yyv253)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv253 := range v {
			z.EncFallback(yyv253)
		}
	}
}

func (x codecSelfer3471) decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v *[]struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, d *codec1978.Decoder) {
	var h codecSelfer3471
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv254 := *v
	yyh254, yyl254 := z.DecSliceHelperStart()

	var yyc254 bool
	if yyv254 == nil {
		if yyl254 <= 0 {
			yyv254 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, 0)
		} else {
			yyv254 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl254)
		}
		yyc254 = true
	}

	if yyl254 == 0 {
		if len(yyv254) != 0 {
			yyv254 = yyv254[:0]
			yyc254 = true
		}
	} else if yyl254 > 0 {

		yyn254 := yyl254
		if yyl254 > cap(yyv254) {
			yyv254 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl254, yyl254)
			yyc254 = true

		} else if yyl254 != len(yyv254) {
			yyv254 = yyv254[:yyl254]
			yyc254 = true
		}
		yyj254 := 0
		for ; yyj254 < yyn254; yyj254++ {
			if r.TryDecodeAsNil() {
				yyv254[yyj254] = struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}
			} else {
				yyv255 := &yyv254[yyj254]
				z.DecFallback(yyv255, false)
			}

		}

	} else {
		for yyj254 := 0; !r.CheckBreak(); yyj254++ {
			if yyj254 >= len(yyv254) {
				yyv254 = append(yyv254, struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}) // var yyz254 struct { Text string; Sub []struct { Text string; Key string; Value string } }
				yyc254 = true
			}
			if yyj254 > 0 {
				yyh254.Sep(yyj254)
			}

			if yyj254 < len(yyv254) {
				if r.TryDecodeAsNil() {
					yyv254[yyj254] = struct {
						Text string
						Sub  []struct {
							Text  string
							Key   string
							Value string
						}
					}{}
				} else {
					yyv256 := &yyv254[yyj254]
					z.DecFallback(yyv256, false)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh254.End()
	}
	if yyc254 {
		*v = yyv254
	}
}

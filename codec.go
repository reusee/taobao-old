// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package taobao

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"math/big"
	"reflect"
	"runtime"
	"time"
)

const (
	codecSelferC_UTF86467         = 1
	codecSelferC_RAW6467          = 0
	codecSelverValueTypeArray6467 = 10
	codecSelverValueTypeMap6467   = 9
)

var (
	codecSelferBitsize6467                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr6467 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer6467 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 time.Time
		var v1 big.Rat
		_, _ = v0, v1
	}
}

func (x *RawItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep1 := !z.EncBinary()
		yy2arr1 := z.EncBasicHandle().StructToArray
		var yyfirst1 bool
		var yyq1 [18]bool
		_, _, _, _ = yysep1, yyfirst1, yyq1, yy2arr1
		const yyr1 bool = false
		if yyr1 || yy2arr1 {
			r.EncodeArrayStart(18)
		} else {
			var yynn1 int = 18
			for _, b := range yyq1 {
				if b {
					yynn1++
				}
			}
			r.EncodeMapStart(yynn1)
		}
		if yyr1 || yy2arr1 {
			r.EncodeString(codecSelferC_UTF86467, string(x.Nid))
		} else {
			yyfirst1 = true
			r.EncodeString(codecSelferC_UTF86467, string("Nid"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Nid))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Category))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Category"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Category))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Pid))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Pid"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Pid))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Title))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Title"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Title))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Raw_title))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Raw_title"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Raw_title))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Pic_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Pic_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Pic_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Detail_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Detail_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Detail_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_price))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("View_price"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_price))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_fee))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("View_fee"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_fee))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Item_loc))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Item_loc"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Item_loc))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Reserve_price))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Reserve_price"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Reserve_price))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_sales))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("View_sales"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.View_sales))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Comment_count))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Comment_count"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Comment_count))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.User_id))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("User_id"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.User_id))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Nick))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Nick"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Nick))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Shopcard)
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Shopcard"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Shopcard)
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Comment_url))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Comment_url"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Comment_url))
		}
		if yyr1 || yy2arr1 {
			if yysep1 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.ShopLink))
		} else {
			if yyfirst1 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst1 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("ShopLink"))
			if yysep1 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.ShopLink))
		}
		if yysep1 {
			if yyr1 || yy2arr1 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *RawItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl20 := r.ReadMapStart()
		if yyl20 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl20, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl20 := r.ReadArrayStart()
		if yyl20 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl20, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *RawItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys21Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys21Slc
	var yyhl21 bool = l >= 0
	for yyj21 := 0; ; yyj21++ {
		if yyhl21 {
			if yyj21 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj21 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys21Slc = r.DecodeBytes(yys21Slc, true, true)
		yys21 := string(yys21Slc)
		if !yyhl21 {
			r.ReadMapKVSeparator()
		}
		switch yys21 {
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = ""
			} else {
				x.Nid = string(r.DecodeString())
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = ""
			} else {
				x.Category = string(r.DecodeString())
			}
		case "Pid":
			if r.TryDecodeAsNil() {
				x.Pid = ""
			} else {
				x.Pid = string(r.DecodeString())
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Raw_title":
			if r.TryDecodeAsNil() {
				x.Raw_title = ""
			} else {
				x.Raw_title = string(r.DecodeString())
			}
		case "Pic_url":
			if r.TryDecodeAsNil() {
				x.Pic_url = ""
			} else {
				x.Pic_url = string(r.DecodeString())
			}
		case "Detail_url":
			if r.TryDecodeAsNil() {
				x.Detail_url = ""
			} else {
				x.Detail_url = string(r.DecodeString())
			}
		case "View_price":
			if r.TryDecodeAsNil() {
				x.View_price = ""
			} else {
				x.View_price = string(r.DecodeString())
			}
		case "View_fee":
			if r.TryDecodeAsNil() {
				x.View_fee = ""
			} else {
				x.View_fee = string(r.DecodeString())
			}
		case "Item_loc":
			if r.TryDecodeAsNil() {
				x.Item_loc = ""
			} else {
				x.Item_loc = string(r.DecodeString())
			}
		case "Reserve_price":
			if r.TryDecodeAsNil() {
				x.Reserve_price = ""
			} else {
				x.Reserve_price = string(r.DecodeString())
			}
		case "View_sales":
			if r.TryDecodeAsNil() {
				x.View_sales = ""
			} else {
				x.View_sales = string(r.DecodeString())
			}
		case "Comment_count":
			if r.TryDecodeAsNil() {
				x.Comment_count = ""
			} else {
				x.Comment_count = string(r.DecodeString())
			}
		case "User_id":
			if r.TryDecodeAsNil() {
				x.User_id = ""
			} else {
				x.User_id = string(r.DecodeString())
			}
		case "Nick":
			if r.TryDecodeAsNil() {
				x.Nick = ""
			} else {
				x.Nick = string(r.DecodeString())
			}
		case "Shopcard":
			if r.TryDecodeAsNil() {
				x.Shopcard = struct {
					LevelClasses    []struct{ LevelClass string }
					IsTmall         bool
					Delivery        []int
					Description     []int
					Service         []int
					EncryptedUserId string
					SellerCredit    int
					TotalRate       int
				}{}
			} else {
				yyv37 := &x.Shopcard
				z.DecFallback(yyv37, false)
			}
		case "Comment_url":
			if r.TryDecodeAsNil() {
				x.Comment_url = ""
			} else {
				x.Comment_url = string(r.DecodeString())
			}
		case "ShopLink":
			if r.TryDecodeAsNil() {
				x.ShopLink = ""
			} else {
				x.ShopLink = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys21)
		} // end switch yys21
	} // end for yyj21
	if !yyhl21 {
		r.ReadMapEnd()
	}
}

func (x *RawItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj40 int
	var yyb40 bool
	var yyhl40 bool = l >= 0
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Nid = ""
	} else {
		x.Nid = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = ""
	} else {
		x.Category = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pid = ""
	} else {
		x.Pid = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Raw_title = ""
	} else {
		x.Raw_title = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Pic_url = ""
	} else {
		x.Pic_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Detail_url = ""
	} else {
		x.Detail_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_price = ""
	} else {
		x.View_price = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_fee = ""
	} else {
		x.View_fee = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Item_loc = ""
	} else {
		x.Item_loc = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reserve_price = ""
	} else {
		x.Reserve_price = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.View_sales = ""
	} else {
		x.View_sales = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_count = ""
	} else {
		x.Comment_count = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User_id = ""
	} else {
		x.User_id = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Nick = ""
	} else {
		x.Nick = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Shopcard = struct {
			LevelClasses    []struct{ LevelClass string }
			IsTmall         bool
			Delivery        []int
			Description     []int
			Service         []int
			EncryptedUserId string
			SellerCredit    int
			TotalRate       int
		}{}
	} else {
		yyv56 := &x.Shopcard
		z.DecFallback(yyv56, false)
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comment_url = ""
	} else {
		x.Comment_url = string(r.DecodeString())
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ShopLink = ""
	} else {
		x.ShopLink = string(r.DecodeString())
	}
	for {
		yyj40++
		if yyhl40 {
			yyb40 = yyj40 > l
		} else {
			yyb40 = r.CheckBreak()
		}
		if yyb40 {
			break
		}
		if yyj40 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj40-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Item) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep59 := !z.EncBinary()
		yy2arr59 := z.EncBasicHandle().StructToArray
		var yyfirst59 bool
		var yyq59 [13]bool
		_, _, _, _ = yysep59, yyfirst59, yyq59, yy2arr59
		const yyr59 bool = false
		if yyr59 || yy2arr59 {
			r.EncodeArrayStart(13)
		} else {
			var yynn59 int = 13
			for _, b := range yyq59 {
				if b {
					yynn59++
				}
			}
			r.EncodeMapStart(yynn59)
		}
		if yyr59 || yy2arr59 {
			r.EncodeInt(int64(x.Nid))
		} else {
			yyfirst59 = true
			r.EncodeString(codecSelferC_UTF86467, string("Nid"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Nid))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Category))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Category"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Category))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Title))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Title"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Title))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Price == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Price)
			}
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Price"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			if x.Price == nil {
				r.EncodeNil()
			} else {
				z.EncFallback(x.Price)
			}
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Location))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Location"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Location))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Sales))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Sales"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Sales))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Comments))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Comments"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Comments))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Seller))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Seller"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Seller))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.SellerEncryptedId))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("SellerEncryptedId"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.SellerEncryptedId))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.SellerName))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("SellerName"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.SellerName))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			if x.SellerLevels == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW6467, []byte(x.SellerLevels))
			}
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("SellerLevels"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			if x.SellerLevels == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW6467, []byte(x.SellerLevels))
			}
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.SellerIsTmall))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("SellerIsTmall"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.SellerIsTmall))
		}
		if yyr59 || yy2arr59 {
			if yysep59 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.SellerCredit))
		} else {
			if yyfirst59 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst59 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("SellerCredit"))
			if yysep59 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.SellerCredit))
		}
		if yysep59 {
			if yyr59 || yy2arr59 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Item) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl73 := r.ReadMapStart()
		if yyl73 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl73, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl73 := r.ReadArrayStart()
		if yyl73 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl73, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *Item) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys74Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys74Slc
	var yyhl74 bool = l >= 0
	for yyj74 := 0; ; yyj74++ {
		if yyhl74 {
			if yyj74 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj74 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys74Slc = r.DecodeBytes(yys74Slc, true, true)
		yys74 := string(yys74Slc)
		if !yyhl74 {
			r.ReadMapKVSeparator()
		}
		switch yys74 {
		case "Nid":
			if r.TryDecodeAsNil() {
				x.Nid = 0
			} else {
				x.Nid = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Category":
			if r.TryDecodeAsNil() {
				x.Category = 0
			} else {
				x.Category = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Title":
			if r.TryDecodeAsNil() {
				x.Title = ""
			} else {
				x.Title = string(r.DecodeString())
			}
		case "Price":
			if r.TryDecodeAsNil() {
				if x.Price != nil {
					x.Price = nil
				}
			} else {
				if x.Price == nil {
					x.Price = new(big.Rat)
				}
				z.DecFallback(x.Price, false)
			}
		case "Location":
			if r.TryDecodeAsNil() {
				x.Location = ""
			} else {
				x.Location = string(r.DecodeString())
			}
		case "Sales":
			if r.TryDecodeAsNil() {
				x.Sales = 0
			} else {
				x.Sales = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Comments":
			if r.TryDecodeAsNil() {
				x.Comments = 0
			} else {
				x.Comments = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Seller":
			if r.TryDecodeAsNil() {
				x.Seller = 0
			} else {
				x.Seller = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "SellerEncryptedId":
			if r.TryDecodeAsNil() {
				x.SellerEncryptedId = ""
			} else {
				x.SellerEncryptedId = string(r.DecodeString())
			}
		case "SellerName":
			if r.TryDecodeAsNil() {
				x.SellerName = ""
			} else {
				x.SellerName = string(r.DecodeString())
			}
		case "SellerLevels":
			if r.TryDecodeAsNil() {
				x.SellerLevels = nil
			} else {
				yyv85 := &x.SellerLevels
				*yyv85 = r.DecodeBytes(*(*[]byte)(yyv85), false, false)
			}
		case "SellerIsTmall":
			if r.TryDecodeAsNil() {
				x.SellerIsTmall = false
			} else {
				x.SellerIsTmall = bool(r.DecodeBool())
			}
		case "SellerCredit":
			if r.TryDecodeAsNil() {
				x.SellerCredit = 0
			} else {
				x.SellerCredit = int(r.DecodeInt(codecSelferBitsize6467))
			}
		default:
			z.DecStructFieldNotFound(-1, yys74)
		} // end switch yys74
	} // end for yyj74
	if !yyhl74 {
		r.ReadMapEnd()
	}
}

func (x *Item) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Nid = 0
	} else {
		x.Nid = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Category = 0
	} else {
		x.Category = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Title = ""
	} else {
		x.Title = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Price != nil {
			x.Price = nil
		}
	} else {
		if x.Price == nil {
			x.Price = new(big.Rat)
		}
		z.DecFallback(x.Price, false)
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Location = ""
	} else {
		x.Location = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Sales = 0
	} else {
		x.Sales = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Comments = 0
	} else {
		x.Comments = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Seller = 0
	} else {
		x.Seller = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerEncryptedId = ""
	} else {
		x.SellerEncryptedId = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerName = ""
	} else {
		x.SellerName = string(r.DecodeString())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerLevels = nil
	} else {
		yyv99 := &x.SellerLevels
		*yyv99 = r.DecodeBytes(*(*[]byte)(yyv99), false, false)
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerIsTmall = false
	} else {
		x.SellerIsTmall = bool(r.DecodeBool())
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SellerCredit = 0
	} else {
		x.SellerCredit = int(r.DecodeInt(codecSelferBitsize6467))
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		if yyj88 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Raw) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep102 := !z.EncBinary()
		yy2arr102 := z.EncBasicHandle().StructToArray
		var yyfirst102 bool
		var yyq102 [4]bool
		_, _, _, _ = yysep102, yyfirst102, yyq102, yy2arr102
		const yyr102 bool = false
		if yyr102 || yy2arr102 {
			r.EncodeArrayStart(4)
		} else {
			var yynn102 int = 4
			for _, b := range yyq102 {
				if b {
					yynn102++
				}
			}
			r.EncodeMapStart(yynn102)
		}
		if yyr102 || yy2arr102 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst102 = true
			r.EncodeString(codecSelferC_UTF86467, string("Cat"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr102 || yy2arr102 {
			if yysep102 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst102 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst102 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Page"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr102 || yy2arr102 {
			if yysep102 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceRawItem([]RawItem(x.Items), e)
			}
		} else {
			if yyfirst102 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst102 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Items"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			if x.Items == nil {
				r.EncodeNil()
			} else {
				h.encSliceRawItem([]RawItem(x.Items), e)
			}
		}
		if yyr102 || yy2arr102 {
			if yysep102 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW6467, []byte(x.Html))
			}
		} else {
			if yyfirst102 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst102 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Html"))
			if yysep102 {
				r.EncodeMapKVSeparator()
			}
			if x.Html == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytes(codecSelferC_RAW6467, []byte(x.Html))
			}
		}
		if yysep102 {
			if yyr102 || yy2arr102 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Raw) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl107 := r.ReadMapStart()
		if yyl107 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl107, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl107 := r.ReadArrayStart()
		if yyl107 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl107, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *Raw) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys108Slc
	var yyhl108 bool = l >= 0
	for yyj108 := 0; ; yyj108++ {
		if yyhl108 {
			if yyj108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj108 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys108Slc = r.DecodeBytes(yys108Slc, true, true)
		yys108 := string(yys108Slc)
		if !yyhl108 {
			r.ReadMapKVSeparator()
		}
		switch yys108 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv111 := &x.Items
				h.decSliceRawItem((*[]RawItem)(yyv111), d)
			}
		case "Html":
			if r.TryDecodeAsNil() {
				x.Html = nil
			} else {
				yyv112 := &x.Html
				*yyv112 = r.DecodeBytes(*(*[]byte)(yyv112), false, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys108)
		} // end switch yys108
	} // end for yyj108
	if !yyhl108 {
		r.ReadMapEnd()
	}
}

func (x *Raw) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj113 int
	var yyb113 bool
	var yyhl113 bool = l >= 0
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv116 := &x.Items
		h.decSliceRawItem((*[]RawItem)(yyv116), d)
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Html = nil
	} else {
		yyv117 := &x.Html
		*yyv117 = r.DecodeBytes(*(*[]byte)(yyv117), false, false)
	}
	for {
		yyj113++
		if yyhl113 {
			yyb113 = yyj113 > l
		} else {
			yyb113 = r.CheckBreak()
		}
		if yyb113 {
			break
		}
		if yyj113 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj113-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Source) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep118 := !z.EncBinary()
		yy2arr118 := z.EncBasicHandle().StructToArray
		var yyfirst118 bool
		var yyq118 [2]bool
		_, _, _, _ = yysep118, yyfirst118, yyq118, yy2arr118
		const yyr118 bool = false
		if yyr118 || yy2arr118 {
			r.EncodeArrayStart(2)
		} else {
			var yynn118 int = 2
			for _, b := range yyq118 {
				if b {
					yynn118++
				}
			}
			r.EncodeMapStart(yynn118)
		}
		if yyr118 || yy2arr118 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst118 = true
			r.EncodeString(codecSelferC_UTF86467, string("Cat"))
			if yysep118 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr118 || yy2arr118 {
			if yysep118 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst118 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst118 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Page"))
			if yysep118 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yysep118 {
			if yyr118 || yy2arr118 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Source) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl121 := r.ReadMapStart()
		if yyl121 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl121, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl121 := r.ReadArrayStart()
		if yyl121 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl121, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *Source) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj122 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		if !yyhl122 {
			r.ReadMapKVSeparator()
		}
		switch yys122 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize6467))
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	if !yyhl122 {
		r.ReadMapEnd()
	}
}

func (x *Source) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj125 int
	var yyb125 bool
	var yyhl125 bool = l >= 0
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize6467))
	}
	for {
		yyj125++
		if yyhl125 {
			yyb125 = yyj125 > l
		} else {
			yyb125 = r.CheckBreak()
		}
		if yyb125 {
			break
		}
		if yyj125 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj125-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep128 := !z.EncBinary()
		yy2arr128 := z.EncBasicHandle().StructToArray
		var yyfirst128 bool
		var yyq128 [3]bool
		_, _, _, _ = yysep128, yyfirst128, yyq128, yy2arr128
		const yyr128 bool = false
		if yyr128 || yy2arr128 {
			r.EncodeArrayStart(3)
		} else {
			var yynn128 int = 3
			for _, b := range yyq128 {
				if b {
					yynn128++
				}
			}
			r.EncodeMapStart(yynn128)
		}
		if yyr128 || yy2arr128 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst128 = true
			r.EncodeString(codecSelferC_UTF86467, string("Cat"))
			if yysep128 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr128 || yy2arr128 {
			if yysep128 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Page))
		} else {
			if yyfirst128 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst128 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Page"))
			if yysep128 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Page))
		}
		if yyr128 || yy2arr128 {
			if yysep128 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Done))
		} else {
			if yyfirst128 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst128 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Done"))
			if yysep128 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Done))
		}
		if yysep128 {
			if yyr128 || yy2arr128 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl132 := r.ReadMapStart()
		if yyl132 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl132, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl132 := r.ReadArrayStart()
		if yyl132 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl132, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys133Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys133Slc
	var yyhl133 bool = l >= 0
	for yyj133 := 0; ; yyj133++ {
		if yyhl133 {
			if yyj133 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj133 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys133Slc = r.DecodeBytes(yys133Slc, true, true)
		yys133 := string(yys133Slc)
		if !yyhl133 {
			r.ReadMapKVSeparator()
		}
		switch yys133 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Page":
			if r.TryDecodeAsNil() {
				x.Page = 0
			} else {
				x.Page = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Done":
			if r.TryDecodeAsNil() {
				x.Done = false
			} else {
				x.Done = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys133)
		} // end switch yys133
	} // end for yyj133
	if !yyhl133 {
		r.ReadMapEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj137 int
	var yyb137 bool
	var yyhl137 bool = l >= 0
	yyj137++
	if yyhl137 {
		yyb137 = yyj137 > l
	} else {
		yyb137 = r.CheckBreak()
	}
	if yyb137 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj137++
	if yyhl137 {
		yyb137 = yyj137 > l
	} else {
		yyb137 = r.CheckBreak()
	}
	if yyb137 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Page = 0
	} else {
		x.Page = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj137++
	if yyhl137 {
		yyb137 = yyj137 > l
	} else {
		yyb137 = r.CheckBreak()
	}
	if yyb137 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Done = false
	} else {
		x.Done = bool(r.DecodeBool())
	}
	for {
		yyj137++
		if yyhl137 {
			yyb137 = yyj137 > l
		} else {
			yyb137 = r.CheckBreak()
		}
		if yyb137 {
			break
		}
		if yyj137 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj137-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Cat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep141 := !z.EncBinary()
		yy2arr141 := z.EncBasicHandle().StructToArray
		var yyfirst141 bool
		var yyq141 [4]bool
		_, _, _, _ = yysep141, yyfirst141, yyq141, yy2arr141
		const yyr141 bool = false
		if yyr141 || yy2arr141 {
			r.EncodeArrayStart(4)
		} else {
			var yynn141 int = 4
			for _, b := range yyq141 {
				if b {
					yynn141++
				}
			}
			r.EncodeMapStart(yynn141)
		}
		if yyr141 || yy2arr141 {
			r.EncodeInt(int64(x.Cat))
		} else {
			yyfirst141 = true
			r.EncodeString(codecSelferC_UTF86467, string("Cat"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Cat))
		}
		if yyr141 || yy2arr141 {
			if yysep141 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Name))
		} else {
			if yyfirst141 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst141 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Name"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeString(codecSelferC_UTF86467, string(x.Name))
		}
		if yyr141 || yy2arr141 {
			if yysep141 {
				r.EncodeArrayEntrySeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		} else {
			if yyfirst141 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst141 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Relatives"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			if x.Relatives == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceIntV(x.Relatives, false, e)
			}
		}
		if yyr141 || yy2arr141 {
			if yysep141 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeInt(int64(x.Parent))
		} else {
			if yyfirst141 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst141 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Parent"))
			if yysep141 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeInt(int64(x.Parent))
		}
		if yysep141 {
			if yyr141 || yy2arr141 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *Cat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl146 := r.ReadMapStart()
		if yyl146 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl146, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl146 := r.ReadArrayStart()
		if yyl146 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl146, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *Cat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys147Slc
	var yyhl147 bool = l >= 0
	for yyj147 := 0; ; yyj147++ {
		if yyhl147 {
			if yyj147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj147 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys147Slc = r.DecodeBytes(yys147Slc, true, true)
		yys147 := string(yys147Slc)
		if !yyhl147 {
			r.ReadMapKVSeparator()
		}
		switch yys147 {
		case "Cat":
			if r.TryDecodeAsNil() {
				x.Cat = 0
			} else {
				x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Relatives":
			if r.TryDecodeAsNil() {
				x.Relatives = nil
			} else {
				yyv150 := &x.Relatives
				z.F.DecSliceIntX(yyv150, false, d)
			}
		case "Parent":
			if r.TryDecodeAsNil() {
				x.Parent = 0
			} else {
				x.Parent = int(r.DecodeInt(codecSelferBitsize6467))
			}
		default:
			z.DecStructFieldNotFound(-1, yys147)
		} // end switch yys147
	} // end for yyj147
	if !yyhl147 {
		r.ReadMapEnd()
	}
}

func (x *Cat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj152 int
	var yyb152 bool
	var yyhl152 bool = l >= 0
	yyj152++
	if yyhl152 {
		yyb152 = yyj152 > l
	} else {
		yyb152 = r.CheckBreak()
	}
	if yyb152 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Cat = 0
	} else {
		x.Cat = int(r.DecodeInt(codecSelferBitsize6467))
	}
	yyj152++
	if yyhl152 {
		yyb152 = yyj152 > l
	} else {
		yyb152 = r.CheckBreak()
	}
	if yyb152 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj152++
	if yyhl152 {
		yyb152 = yyj152 > l
	} else {
		yyb152 = r.CheckBreak()
	}
	if yyb152 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Relatives = nil
	} else {
		yyv155 := &x.Relatives
		z.F.DecSliceIntX(yyv155, false, d)
	}
	yyj152++
	if yyhl152 {
		yyb152 = yyj152 > l
	} else {
		yyb152 = r.CheckBreak()
	}
	if yyb152 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Parent = 0
	} else {
		x.Parent = int(r.DecodeInt(codecSelferBitsize6467))
	}
	for {
		yyj152++
		if yyhl152 {
			yyb152 = yyj152 > l
		} else {
			yyb152 = r.CheckBreak()
		}
		if yyb152 {
			break
		}
		if yyj152 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj152-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CatInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep157 := !z.EncBinary()
		yy2arr157 := z.EncBasicHandle().StructToArray
		var yyfirst157 bool
		var yyq157 [1]bool
		_, _, _, _ = yysep157, yyfirst157, yyq157, yy2arr157
		const yyr157 bool = false
		if yyr157 || yy2arr157 {
			r.EncodeArrayStart(1)
		} else {
			var yynn157 int = 1
			for _, b := range yyq157 {
				if b {
					yynn157++
				}
			}
			r.EncodeMapStart(yynn157)
		}
		if yyr157 || yy2arr157 {
			z.EncFallback(x.LastChecked)
		} else {
			yyfirst157 = true
			r.EncodeString(codecSelferC_UTF86467, string("LastChecked"))
			if yysep157 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.LastChecked)
		}
		if yysep157 {
			if yyr157 || yy2arr157 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *CatInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl159 := r.ReadMapStart()
		if yyl159 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl159, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl159 := r.ReadArrayStart()
		if yyl159 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl159, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *CatInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj160 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		if !yyhl160 {
			r.ReadMapKVSeparator()
		}
		switch yys160 {
		case "LastChecked":
			if r.TryDecodeAsNil() {
				x.LastChecked = time.Time{}
			} else {
				yyv161 := &x.LastChecked
				z.DecFallback(yyv161, false)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadMapEnd()
	}
}

func (x *CatInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj162 int
	var yyb162 bool
	var yyhl162 bool = l >= 0
	yyj162++
	if yyhl162 {
		yyb162 = yyj162 > l
	} else {
		yyb162 = r.CheckBreak()
	}
	if yyb162 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastChecked = time.Time{}
	} else {
		yyv163 := &x.LastChecked
		z.DecFallback(yyv163, false)
	}
	for {
		yyj162++
		if yyhl162 {
			yyb162 = yyj162 > l
		} else {
			yyb162 = r.CheckBreak()
		}
		if yyb162 {
			break
		}
		if yyj162 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj162-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NavData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep164 := !z.EncBinary()
		yy2arr164 := z.EncBasicHandle().StructToArray
		var yyfirst164 bool
		var yyq164 [3]bool
		_, _, _, _ = yysep164, yyfirst164, yyq164, yy2arr164
		const yyr164 bool = false
		if yyr164 || yy2arr164 {
			r.EncodeArrayStart(3)
		} else {
			var yynn164 int = 3
			for _, b := range yyq164 {
				if b {
					yynn164++
				}
			}
			r.EncodeMapStart(yynn164)
		}
		if yyr164 || yy2arr164 {
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		} else {
			yyfirst164 = true
			r.EncodeString(codecSelferC_UTF86467, string("Common"))
			if yysep164 {
				r.EncodeMapKVSeparator()
			}
			if x.Common == nil {
				r.EncodeNil()
			} else {
				h.encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9([]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}(x.Common), e)
			}
		}
		if yyr164 || yy2arr164 {
			if yysep164 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		} else {
			if yyfirst164 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst164 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Breadcrumbs"))
			if yysep164 {
				r.EncodeMapKVSeparator()
			}
			z.EncFallback(x.Breadcrumbs)
		}
		if yyr164 || yy2arr164 {
			if yysep164 {
				r.EncodeArrayEntrySeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		} else {
			if yyfirst164 {
				r.EncodeMapEntrySeparator()
			} else {
				yyfirst164 = true
			}
			r.EncodeString(codecSelferC_UTF86467, string("Hidenav"))
			if yysep164 {
				r.EncodeMapKVSeparator()
			}
			r.EncodeBool(bool(x.Hidenav))
		}
		if yysep164 {
			if yyr164 || yy2arr164 {
				r.EncodeArrayEnd()
			} else {
				r.EncodeMapEnd()
			}
		}
	}
}

func (x *NavData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if r.IsContainerType(codecSelverValueTypeMap6467) {
		yyl168 := r.ReadMapStart()
		if yyl168 == 0 {
			r.ReadMapEnd()
		} else {
			x.codecDecodeSelfFromMap(yyl168, d)
		}
	} else if r.IsContainerType(codecSelverValueTypeArray6467) {
		yyl168 := r.ReadArrayStart()
		if yyl168 == 0 {
			r.ReadArrayEnd()
		} else {
			x.codecDecodeSelfFromArray(yyl168, d)
		}
	} else {
		panic(codecSelferOnlyMapOrArrayEncodeToStructErr6467)
	}
}

func (x *NavData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys169Slc
	var yyhl169 bool = l >= 0
	for yyj169 := 0; ; yyj169++ {
		if yyhl169 {
			if yyj169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj169 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys169Slc = r.DecodeBytes(yys169Slc, true, true)
		yys169 := string(yys169Slc)
		if !yyhl169 {
			r.ReadMapKVSeparator()
		}
		switch yys169 {
		case "Common":
			if r.TryDecodeAsNil() {
				x.Common = nil
			} else {
				yyv170 := &x.Common
				h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				})(yyv170), d)
			}
		case "Breadcrumbs":
			if r.TryDecodeAsNil() {
				x.Breadcrumbs = struct {
					BaobeiTotalHit string
					Catpath        []struct {
						Catid string
						Name  string
					}
				}{}
			} else {
				yyv171 := &x.Breadcrumbs
				z.DecFallback(yyv171, false)
			}
		case "Hidenav":
			if r.TryDecodeAsNil() {
				x.Hidenav = false
			} else {
				x.Hidenav = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys169)
		} // end switch yys169
	} // end for yyj169
	if !yyhl169 {
		r.ReadMapEnd()
	}
}

func (x *NavData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj173 int
	var yyb173 bool
	var yyhl173 bool = l >= 0
	yyj173++
	if yyhl173 {
		yyb173 = yyj173 > l
	} else {
		yyb173 = r.CheckBreak()
	}
	if yyb173 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Common = nil
	} else {
		yyv174 := &x.Common
		h.decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9((*[]struct {
			Text string
			Sub  []struct {
				Text  string
				Key   string
				Value string
			}
		})(yyv174), d)
	}
	yyj173++
	if yyhl173 {
		yyb173 = yyj173 > l
	} else {
		yyb173 = r.CheckBreak()
	}
	if yyb173 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Breadcrumbs = struct {
			BaobeiTotalHit string
			Catpath        []struct {
				Catid string
				Name  string
			}
		}{}
	} else {
		yyv175 := &x.Breadcrumbs
		z.DecFallback(yyv175, false)
	}
	yyj173++
	if yyhl173 {
		yyb173 = yyj173 > l
	} else {
		yyb173 = r.CheckBreak()
	}
	if yyb173 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hidenav = false
	} else {
		x.Hidenav = bool(r.DecodeBool())
	}
	for {
		yyj173++
		if yyhl173 {
			yyb173 = yyj173 > l
		} else {
			yyb173 = r.CheckBreak()
		}
		if yyb173 {
			break
		}
		if yyj173 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj173-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer6467) encSliceRawItem(v []RawItem, e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys177 := !z.EncBinary()
	if yys177 {
		for yyi177, yyv177 := range v {
			if yyi177 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv177.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv177 := range v {
			yyv177.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer6467) decSliceRawItem(v *[]RawItem, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv178 := *v
	yyh178, yyl178 := z.DecSliceHelperStart()

	var yyc178 bool
	if yyv178 == nil {
		if yyl178 <= 0 {
			yyv178 = make([]RawItem, 0)
		} else {
			yyv178 = make([]RawItem, yyl178)
		}
		yyc178 = true
	}

	if yyl178 == 0 {
		if len(yyv178) != 0 {
			yyv178 = yyv178[:0]
			yyc178 = true
		}
	} else if yyl178 > 0 {

		yyn178 := yyl178
		if yyl178 > cap(yyv178) {
			yyv178 = make([]RawItem, yyl178, yyl178)
			yyc178 = true

		} else if yyl178 != len(yyv178) {
			yyv178 = yyv178[:yyl178]
			yyc178 = true
		}
		yyj178 := 0
		for ; yyj178 < yyn178; yyj178++ {
			if r.TryDecodeAsNil() {
				yyv178[yyj178] = RawItem{}
			} else {
				yyv179 := &yyv178[yyj178]
				yyv179.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj178 := 0; !r.CheckBreak(); yyj178++ {
			if yyj178 >= len(yyv178) {
				yyv178 = append(yyv178, RawItem{}) // var yyz178 RawItem
				yyc178 = true
			}
			if yyj178 > 0 {
				yyh178.Sep(yyj178)
			}

			if yyj178 < len(yyv178) {
				if r.TryDecodeAsNil() {
					yyv178[yyj178] = RawItem{}
				} else {
					yyv180 := &yyv178[yyj178]
					yyv180.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh178.End()
	}
	if yyc178 {
		*v = yyv178
	}
}

func (x codecSelfer6467) encSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v []struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, e *codec1978.Encoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys181 := !z.EncBinary()
	if yys181 {
		for yyi181, yyv181 := range v {
			if yyi181 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			z.EncFallback(yyv181)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv181 := range v {
			z.EncFallback(yyv181)
		}
	}
}

func (x codecSelfer6467) decSlicec3RydWN0IHsgVGV4dCBzdHJpbmc7IFN1YiBbXXN0cnVjdCB7IFRleHQgc3RyaW5nOyBLZXkgc3RyaW5nOyBWYWx1ZSBzdHJpbmcgfSB9(v *[]struct {
	Text string
	Sub  []struct {
		Text  string
		Key   string
		Value string
	}
}, d *codec1978.Decoder) {
	var h codecSelfer6467
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv182 := *v
	yyh182, yyl182 := z.DecSliceHelperStart()

	var yyc182 bool
	if yyv182 == nil {
		if yyl182 <= 0 {
			yyv182 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, 0)
		} else {
			yyv182 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl182)
		}
		yyc182 = true
	}

	if yyl182 == 0 {
		if len(yyv182) != 0 {
			yyv182 = yyv182[:0]
			yyc182 = true
		}
	} else if yyl182 > 0 {

		yyn182 := yyl182
		if yyl182 > cap(yyv182) {
			yyv182 = make([]struct {
				Text string
				Sub  []struct {
					Text  string
					Key   string
					Value string
				}
			}, yyl182, yyl182)
			yyc182 = true

		} else if yyl182 != len(yyv182) {
			yyv182 = yyv182[:yyl182]
			yyc182 = true
		}
		yyj182 := 0
		for ; yyj182 < yyn182; yyj182++ {
			if r.TryDecodeAsNil() {
				yyv182[yyj182] = struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}
			} else {
				yyv183 := &yyv182[yyj182]
				z.DecFallback(yyv183, false)
			}

		}

	} else {
		for yyj182 := 0; !r.CheckBreak(); yyj182++ {
			if yyj182 >= len(yyv182) {
				yyv182 = append(yyv182, struct {
					Text string
					Sub  []struct {
						Text  string
						Key   string
						Value string
					}
				}{}) // var yyz182 struct { Text string; Sub []struct { Text string; Key string; Value string } }
				yyc182 = true
			}
			if yyj182 > 0 {
				yyh182.Sep(yyj182)
			}

			if yyj182 < len(yyv182) {
				if r.TryDecodeAsNil() {
					yyv182[yyj182] = struct {
						Text string
						Sub  []struct {
							Text  string
							Key   string
							Value string
						}
					}{}
				} else {
					yyv184 := &yyv182[yyj182]
					z.DecFallback(yyv184, false)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh182.End()
	}
	if yyc182 {
		*v = yyv182
	}
}
